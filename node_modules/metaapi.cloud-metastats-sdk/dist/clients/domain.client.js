'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _errorHandler = require('./errorHandler');

/**
 * Connection URL and request managing client
 */
class DomainClient {

  /**
   * Constructs domain client instance
   * @param {HttpClient} httpClient HTTP client
   * @param {String} token authorization token
   * @param {String} domain domain to connect to, default is agiliumtrade.agiliumtrade.ai
   */
  constructor(httpClient, token, domain = 'agiliumtrade.agiliumtrade.ai') {
    this._httpClient = httpClient;
    this._domain = domain;
    this._token = token;
    this._urlCache = null;
    this._accountCache = {};
  }

  /**
   * Returns domain client token
   * @returns {String} client token
   */
  get token() {
    return this._token;
  }

  /**
   * Sends a MetaStats API request
   * @param {Function} getOpts function to get request options
   * @param {String} accountId account id
   * @returns {Object|String|any} request result
   */
  async requestMetastats(getOpts, accountId) {
    await this._updateHost();
    await this._updateAccountHost(accountId);
    const accountCache = this._accountCache[accountId];
    try {
      const regionSettings = accountCache.regions[accountCache.regionIndex];
      const opts = getOpts(`https://metastats-api-v1.${regionSettings.region}.${this._urlCache.domain}`, regionSettings.id);

      return await this._httpClient.request(opts);
    } catch (err) {
      if (!['ConflictError', 'InternalError', 'ApiError', 'TimeoutError'].includes(err.name)) {
        throw err;
      } else {
        if (accountCache.regions.length === accountCache.regionIndex + 1) {
          throw err;
        } else {
          accountCache.regionIndex++;
          return await this.requestMetastats(getOpts, accountId);
        }
      }
    }
  }

  async _updateHost() {
    if (!this._urlCache || this._urlCache.lastUpdated < Date.now() - 1000 * 60 * 10) {
      const urlSettings = await this._httpClient.requestWithFailover({
        url: `https://mt-provisioning-api-v1.${this._domain}/users/current/servers/mt-client-api`,
        method: 'GET',
        headers: {
          'auth-token': this._token
        },
        json: true
      });
      this._urlCache = {
        domain: urlSettings.domain,
        lastUpdated: Date.now()
      };
    }
  }

  async _updateAccountHost(accountId) {
    if (!this._accountCache[accountId] || this._accountCache[accountId].lastUpdated < Date.now() - 1000 * 60 * 10) {

      const getAccount = async id => {
        const accountOpts = {
          url: `https://mt-provisioning-api-v1.${this._domain}/users/current/accounts/${id}`,
          method: 'GET',
          headers: {
            'auth-token': this._token
          },
          json: true
        };

        return await this._httpClient.requestWithFailover(accountOpts);
      };

      let accounts = [];
      let accountData = await getAccount(accountId);
      if (accountData.primaryAccountId) {
        accountData = await getAccount(accountData.primaryAccountId);
      }
      accounts = [{ _id: accountData._id, region: accountData.region, state: accountData.state }].concat(accountData.accountReplicas || []);
      accounts = accounts.filter(account => account.state === 'DEPLOYED');
      if (!accounts.length) {
        throw new _errorHandler.ValidationError('There are no replicas deployed yet. Please make sure at least ' + 'one of the replicas is deployed.');
      }

      let regions = accounts.map(account => ({ region: account.region, id: account._id }));

      this._accountCache[accountId] = {
        regions,
        regionIndex: 0,
        lastUpdated: Date.now()
      };
    }
  }

}
exports.default = DomainClient;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2xpYi9jbGllbnRzL2RvbWFpbi5jbGllbnQuZXM2Il0sIm5hbWVzIjpbIkRvbWFpbkNsaWVudCIsImNvbnN0cnVjdG9yIiwiaHR0cENsaWVudCIsInRva2VuIiwiZG9tYWluIiwiX2h0dHBDbGllbnQiLCJfZG9tYWluIiwiX3Rva2VuIiwiX3VybENhY2hlIiwiX2FjY291bnRDYWNoZSIsInJlcXVlc3RNZXRhc3RhdHMiLCJnZXRPcHRzIiwiYWNjb3VudElkIiwiX3VwZGF0ZUhvc3QiLCJfdXBkYXRlQWNjb3VudEhvc3QiLCJhY2NvdW50Q2FjaGUiLCJyZWdpb25TZXR0aW5ncyIsInJlZ2lvbnMiLCJyZWdpb25JbmRleCIsIm9wdHMiLCJyZWdpb24iLCJpZCIsInJlcXVlc3QiLCJlcnIiLCJpbmNsdWRlcyIsIm5hbWUiLCJsZW5ndGgiLCJsYXN0VXBkYXRlZCIsIkRhdGUiLCJub3ciLCJ1cmxTZXR0aW5ncyIsInJlcXVlc3RXaXRoRmFpbG92ZXIiLCJ1cmwiLCJtZXRob2QiLCJoZWFkZXJzIiwianNvbiIsImdldEFjY291bnQiLCJhY2NvdW50T3B0cyIsImFjY291bnRzIiwiYWNjb3VudERhdGEiLCJwcmltYXJ5QWNjb3VudElkIiwiX2lkIiwic3RhdGUiLCJjb25jYXQiLCJhY2NvdW50UmVwbGljYXMiLCJmaWx0ZXIiLCJhY2NvdW50IiwiVmFsaWRhdGlvbkVycm9yIiwibWFwIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0FBRUE7O0FBRUE7OztBQUdlLE1BQU1BLFlBQU4sQ0FBbUI7O0FBRWhDOzs7Ozs7QUFNQUMsY0FBWUMsVUFBWixFQUF3QkMsS0FBeEIsRUFBK0JDLFNBQVMsOEJBQXhDLEVBQXdFO0FBQ3RFLFNBQUtDLFdBQUwsR0FBbUJILFVBQW5CO0FBQ0EsU0FBS0ksT0FBTCxHQUFlRixNQUFmO0FBQ0EsU0FBS0csTUFBTCxHQUFjSixLQUFkO0FBQ0EsU0FBS0ssU0FBTCxHQUFpQixJQUFqQjtBQUNBLFNBQUtDLGFBQUwsR0FBcUIsRUFB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cEI7QUFDRDtBQUNERixpQkFBVyxDQUFDLEVBQUNHLEtBQUtGLFlBQVlFLEdBQWxCLEVBQXVCckIsUUFBUW1CLFlBQVluQixNQUEzQyxFQUFtRHNCLE9BQU9ILFlBQVlHLEtBQXRFLEVBQUQsRUFDUkMsTUFEUSxDQUNBSixZQUFZSyxlQUFaLElBQStCLEVBRC9CLENBQVg7QUFFQU4saUJBQVdBLFNBQVNPLE1BQVQsQ0FBZ0JDLFdBQVdBLFFBQVFKLEtBQVIsS0FBa0IsVUFBN0MsQ0FBWDtBQUNBLFVBQUcsQ0FBQ0osU0FBU1osTUFBYixFQUFxQjtBQUNuQixjQUFNLElBQUlxQiw2QkFBSixDQUFvQixtRUFDMUIsa0NBRE0sQ0FBTjtBQUVEOztBQUVELFVBQUk5QixVQUFVcUIsU0FBU1UsR0FBVCxDQUFhRixZQUFZLEVBQUMxQixRQUFRMEIsUUFBUTFCLE1BQWpCLEVBQXlCQyxJQUFJeUIsUUFBUUwsR0FBckMsRUFBWixDQUFiLENBQWQ7O0FBRUEsV0FBS2hDLGFBQUwsQ0FBbUJHLFNBQW5CLElBQWdDO0FBQzlCSyxlQUQ4QjtBQUU5QkMscUJBQWEsQ0FGaUI7QUFHOUJTLHFCQUFhQyxLQUFLQyxHQUFMO0FBSGlCLE9BQWhDO0FBS0Q7QUFDRjs7QUE3RytCO2tCQUFiN0IsWSIsImZpbGUiOiJkb21haW4uY2xpZW50LmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgeyBWYWxpZGF0aW9uRXJyb3IgfSBmcm9tICcuL2Vycm9ySGFuZGxlcic7XG5cbi8qKlxuICogQ29ubmVjdGlvbiBVUkwgYW5kIHJlcXVlc3QgbWFuYWdpbmcgY2xpZW50XG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIERvbWFpbkNsaWVudCB7XG5cbiAgLyoqXG4gICAqIENvbnN0cnVjdHMgZG9tYWluIGNsaWVudCBpbnN0YW5jZVxuICAgKiBAcGFyYW0ge0h0dHBDbGllbnR9IGh0dHBDbGllbnQgSFRUUCBjbGllbnRcbiAgICogQHBhcmFtIHtTdHJpbmd9IHRva2VuIGF1dGhvcml6YXRpb24gdG9rZW5cbiAgICogQHBhcmFtIHtTdHJpbmd9IGRvbWFpbiBkb21haW4gdG8gY29ubmVjdCB0bywgZGVmYXVsdCBpcyBhZ2lsaXVtdHJhZGUuYWdpbGl1bXRyYWRlLmFpXG4gICAqL1xuICBjb25zdHJ1Y3RvcihodHRwQ2xpZW50LCB0b2tlbiwgZG9tYWluID0gJ2FnaWxpdW10cmFkZS5hZ2lsaXVtdHJhZGUuYWknKSB7XG4gICAgdGhpcy5faHR0cENsaWVudCA9IGh0dHBDbGllbnQ7XG4gICAgdGhpcy5fZG9tYWluID0gZG9tYWluO1xuICAgIHRoaXMuX3Rva2VuID0gdG9rZW47XG4gICAgdGhpcy5fdXJsQ2FjaGUgPSBudWxsO1xuICAgIHRoaXMuX2FjY291bnRDYWNoZSA9IHt9O1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgZG9tYWluIGNsaWVudCB0b2tlblxuICAgKiBAcmV0dXJucyB7U3RyaW5nfSBjbGllbnQgdG9rZW5cbiAgICovXG4gIGdldCB0b2tlbigpIHtcbiAgICByZXR1cm4gdGhpcy5fdG9rZW47XG4gIH1cblxuICAvKipcbiAgICogU2VuZHMgYSBNZXRhU3RhdHMgQVBJIHJlcXVlc3RcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gZ2V0T3B0cyBmdW5jdGlvbiB0byBnZXQgcmVxdWVzdCBvcHRpb25zXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBhY2NvdW50SWQgYWNjb3VudCBpZFxuICAgKiBAcmV0dXJucyB7T2JqZWN0fFN0cmluZ3xhbnl9IHJlcXVlc3QgcmVzdWx0XG4gICAqL1xuICBhc3luYyByZXF1ZXN0TWV0YXN0YXRzKGdldE9wdHMsIGFjY291bnRJZCkge1xuICAgIGF3YWl0IHRoaXMuX3VwZGF0ZUhvc3QoKTtcbiAgICBhd2FpdCB0aGlzLl91cGRhdGVBY2NvdW50SG9zdChhY2NvdW50SWQpO1xuICAgIGNvbnN0IGFjY291bnRDYWNoZSA9IHRoaXMuX2FjY291bnRDYWNoZVthY2NvdW50SWRdO1xuICAgIHRyeSB7XG4gICAgICBjb25zdCByZWdpb25TZXR0aW5ncyA9IGFjY291bnRDYWNoZS5yZWdpb25zW2FjY291bnRDYWNoZS5yZWdpb25JbmRleF07XG4gICAgICBjb25zdCBvcHRzID0gZ2V0T3B0cyhgaHR0cHM6Ly9tZXRhc3RhdHMtYXBpLXYxLiR7cmVnaW9uU2V0dGluZ3MucmVnaW9ufS4ke3RoaXMuX3VybENhY2hlLmRvbWFpbn1gLCBcbiAgICAgICAgcmVnaW9uU2V0dGluZ3MuaWQpO1xuXG4gICAgICByZXR1cm4gYXdhaXQgdGhpcy5faHR0cENsaWVudC5yZXF1ZXN0KG9wdHMpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgaWYoIVsnQ29uZmxpY3RFcnJvcicsICdJbnRlcm5hbEVycm9yJywgJ0FwaUVycm9yJywgJ1RpbWVvdXRFcnJvciddLmluY2x1ZGVzKGVyci5uYW1lKSkge1xuICAgICAgICB0aHJvdyBlcnI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZihhY2NvdW50Q2FjaGUucmVnaW9ucy5sZW5ndGggPT09IGFjY291bnRDYWNoZS5yZWdpb25JbmRleCArIDEpIHtcbiAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYWNjb3VudENhY2hlLnJlZ2lvbkluZGV4Kys7XG4gICAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMucmVxdWVzdE1ldGFzdGF0cyhnZXRPcHRzLCBhY2NvdW50SWQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gIH1cblxuICBhc3luYyBfdXBkYXRlSG9zdCgpIHtcbiAgICBpZighdGhpcy5fdXJsQ2FjaGUgfHwgdGhpcy5fdXJsQ2FjaGUubGFzdFVwZGF0ZWQgPCBEYXRlLm5vdygpIC0gMTAwMCAqIDYwICogMTApIHtcbiAgICAgIGNvbnN0IHVybFNldHRpbmdzID0gYXdhaXQgdGhpcy5faHR0cENsaWVudC5yZXF1ZXN0V2l0aEZhaWxvdmVyKHtcbiAgICAgICAgdXJsOiBgaHR0cHM6Ly9tdC1wcm92aXNpb25pbmctYXBpLXYxLiR7dGhpcy5fZG9tYWlufS91c2Vycy9jdXJyZW50L3NlcnZlcnMvbXQtY2xpZW50LWFwaWAsXG4gICAgICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAnYXV0aC10b2tlbic6IHRoaXMuX3Rva2VuXG4gICAgICAgIH0sXG4gICAgICAgIGpzb246IHRydWUsXG4gICAgICB9KTtcbiAgICAgIHRoaXMuX3VybENhY2hlID0ge1xuICAgICAgICBkb21haW46IHVybFNldHRpbmdzLmRvbWFpbixcbiAgICAgICAgbGFzdFVwZGF0ZWQ6IERhdGUubm93KClcbiAgICAgIH07IFxuICAgIH1cbiAgfVxuICBcbiAgYXN5bmMgX3VwZGF0ZUFjY291bnRIb3N0KGFjY291bnRJZCkge1xuICAgIGlmKCF0aGlzLl9hY2NvdW50Q2FjaGVbYWNjb3VudElkXSB8fCB0aGlzLl9hY2NvdW50Q2FjaGVbYWNjb3VudElkXS5sYXN0VXBkYXRlZCA8IERhdGUubm93KCkgLSAxMDAwICogNjAgKiAxMCkge1xuXG4gICAgICBjb25zdCBnZXRBY2NvdW50ID0gYXN5bmMgKGlkKSA9PiB7XG4gICAgICAgIGNvbnN0IGFjY291bnRPcHRzID0ge1xuICAgICAgICAgIHVybDogYGh0dHBzOi8vbXQtcHJvdmlzaW9uaW5nLWFwaS12MS4ke3RoaXMuX2RvbWFpbn0vdXNlcnMvY3VycmVudC9hY2NvdW50cy8ke2lkfWAsXG4gICAgICAgICAgbWV0aG9kOiAnR0VUJyxcbiAgICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICAnYXV0aC10b2tlbic6IHRoaXMuX3Rva2VuXG4gICAgICAgICAgfSxcbiAgICAgICAgICBqc29uOiB0cnVlXG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuX2h0dHBDbGllbnQucmVxdWVzdFdpdGhGYWlsb3ZlcihhY2NvdW50T3B0cyk7XG4gICAgICB9O1xuXG4gICAgICBsZXQgYWNjb3VudHMgPSBbXTtcbiAgICAgIGxldCBhY2NvdW50RGF0YSA9IGF3YWl0IGdldEFjY291bnQoYWNjb3VudElkKTtcbiAgICAgIGlmKGFjY291bnREYXRhLnByaW1hcnlBY2NvdW50SWQpIHtcbiAgICAgICAgYWNjb3VudERhdGEgPSBhd2FpdCBnZXRBY2NvdW50KGFjY291bnREYXRhLnByaW1hcnlBY2NvdW50SWQpO1xuICAgICAgfVxuICAgICAgYWNjb3VudHMgPSBbe19pZDogYWNjb3VudERhdGEuX2lkLCByZWdpb246IGFjY291bnREYXRhLnJlZ2lvbiwgc3RhdGU6IGFjY291bnREYXRhLnN0YXRlfV1cbiAgICAgICAgLmNvbmNhdCgoYWNjb3VudERhdGEuYWNjb3VudFJlcGxpY2FzIHx8IFtdKSk7XG4gICAgICBhY2NvdW50cyA9IGFjY291bnRzLmZpbHRlcihhY2NvdW50ID0+IGFjY291bnQuc3RhdGUgPT09ICdERVBMT1lFRCcpO1xuICAgICAgaWYoIWFjY291bnRzLmxlbmd0aCkge1xuICAgICAgICB0aHJvdyBuZXcgVmFsaWRhdGlvbkVycm9yKCdUaGVyZSBhcmUgbm8gcmVwbGljYXMgZGVwbG95ZWQgeWV0LiBQbGVhc2UgbWFrZSBzdXJlIGF0IGxlYXN0ICcgK1xuICAgICAgICAnb25lIG9mIHRoZSByZXBsaWNhcyBpcyBkZXBsb3llZC4nKTtcbiAgICAgIH1cblxuICAgICAgbGV0IHJlZ2lvbnMgPSBhY2NvdW50cy5tYXAoYWNjb3VudCA9PiAoe3JlZ2lvbjogYWNjb3VudC5yZWdpb24sIGlkOiBhY2NvdW50Ll9pZH0pKTtcblxuICAgICAgdGhpcy5fYWNjb3VudENhY2hlW2FjY291bnRJZF0gPSB7XG4gICAgICAgIHJlZ2lvbnMsXG4gICAgICAgIHJlZ2lvbkluZGV4OiAwLFxuICAgICAgICBsYXN0VXBkYXRlZDogRGF0ZS5ub3coKVxuICAgICAgfTtcbiAgICB9XG4gIH1cblxufVxuIl19