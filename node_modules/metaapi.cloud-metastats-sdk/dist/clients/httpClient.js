'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.HttpClientMock = undefined;

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _requestPromiseAny = require('request-promise-any');

var _requestPromiseAny2 = _interopRequireDefault(_requestPromiseAny);

var _errorHandler = require('./errorHandler');

var _timeoutError = require('./timeoutError');

var _timeoutError2 = _interopRequireDefault(_timeoutError);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * HTTP client library based on request-promise
 */
class HttpClient {

  /**
   * @typedef {Object} RetryOptions retry options
   * @property {Number} [retries] the number of attempts to retry failed request, default 5
   * @property {Number} [minDelayInSeconds] minimum delay in seconds before retrying, default 1
   * @property {Number} [maxDelayInSeconds] maximum delay in seconds before retrying, default 30
   */

  /**
   * Constructs HttpClient class instance
   * @param {Number} timeout request timeout in seconds
   * @param {RetryOptions} [retryOpts] retry options
   */
  constructor(timeout = 60, retryOpts = {}) {
    this._timeout = timeout * 1000;
    this._retries = retryOpts.retries || 5;
    this._minRetryDelay = (retryOpts.minDelayInSeconds || 1) * 1000;
    this._maxRetryDelay = (retryOpts.maxDelayInSeconds || 30) * 1000;
  }

  /**
   * Performs a request. Response errors are returned as ApiError or subclasses.
   * @param {Object} options request options
   * @returns {Object|String|any} request result
   */
  async request(options, endTime = Date.now() + this._maxRetryDelay * this._retries) {
    options.timeout = this._timeout;
    let retryAfterSeconds = 0;
    options.callback = (e, res) => {
      if (res && res.statusCode === 202) {
        retryAfterSeconds = res.headers['retry-after'];
      }
    };
    let body;
    try {
      body = await this._makeRequest(options);
    } catch (err) {
      throw this._convertError(err);
    }
    if (retryAfterSeconds) {
      await this._handleRetry(endTime, retryAfterSeconds * 1000);
      body = await this.request(options, endTime);
    }
    return body;
  }

  /**
   * Performs a request with failover. Response errors are returned as ApiError or subclasses.
   * @param {Object} options request options
   * @returns {Object|String|any} request result
   */
  async requestWithFailover(options, retryCounter = 0, endTime = Date.now() + this._maxRetryDelay * this._retries) {
    options.timeout = this._timeout;
    let retryAfterSeconds = 0;
    options.callback = (e, res) => {
      if (res && res.statusCode === 202) {
        retryAfterSeconds = res.headers['retry-after'];
      }
    };
    let body;
    try {
      body = await this._makeRequest(options);
    } catch (err) {
      retryCounter = await this._handleError(err, retryCounter, endTime);
      return this.requestWithFailover(options, retryCounter, endTime);
    }
    if (retryAfterSeconds) {
      await this._handleRetry(endTime, retryAfterSeconds * 1000);
      body = await this.requestWithFailover(options, retryCounter, endTime);
    }
    return body;
  }

  _makeRequest(options) {
    return (0, _requestPromiseAny2.default)(options);
  }

  async _wait(pause) {
    await new _promise2.default(res => setTimeout(res, pause));
  }

  async _handleRetry(endTime, retryAfter) {
    if (endTime > Date.now() + retryAfter) {
      await this._wait(retryAfter);
    } else {
      throw new _timeoutError2.default('Timed out waiting for the end of the process of calculating metrics');
    }
  }

  async _handleError(err, retryCounter, endTime) {
    const error = this._convertError(err);
    if (['InternalError', 'ApiError'].includes(error.name) && retryCounter < this._retries) {
      const pause = Math.min(Math.pow(2, retryCounter) * this._minRetryDelay, this._maxRetryDelay);
      await this._wait(pause);
      return retryCounter + 1;
    } else if (error.name === 'TooManyRequestsError') {
      const retryTime = Date.parse(error.metadata.recommendedRetryTime);
      if (retryTime < endTime) {
        await this._wait(retryTime - Date.now());
        return retryCounter;
      }
    }
    throw error;
  }

  // eslint-disable-next-line complexity
  _convertError(err) {
    err.error = err.error || {};
    let status = err.statusCode || err.status;
    switch (status) {
      case 400:
        return new _errorHandler.ValidationError(err.error.message || err.message, err.error.details || err.details);
      case 401:
        return new _errorHandler.UnauthorizedError(err.error.message || err.message);
      case 403:
        return new _errorHandler.ForbiddenError(err.error.message || err.message);
      case 404:
        return new _errorHandler.NotFoundError(err.error.message || err.message);
      case 429:
        return new _errorHandler.TooManyRequestsError(err.error.message || err.message, err.error.metadata || err.metadata);
      case 500:
        return new _errorHandler.InternalError(err.error.message || err.message);
      default:
        return new _errorHandler.ApiError(_errorHandler.ApiError, err.error.message || err.message, status);
    }
  }

}

exports.default = HttpClient; /**
                               * HTTP client service mock for tests
                               */

class HttpClientMock extends HttpClient {

  /**
   * Constructs HTTP client mock
   * @param {Function(options:Object):Promise} requestFn mocked request function
   * @param {Number} timeout request timeout in seconds
   * @param {RetryOptions} retryOpts retry options
   */
  constructor(requestFn, timeout, retryOpts) {
    super(timeout, retryOpts);
    this._requestFn = requestFn;
  }

  _makeRequest() {
    return this._requestFn.apply(this, arguments);
  }

}
exports.HttpClientMock = HttpClientMock;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2xpYi9jbGllbnRzL2h0dHBDbGllbnQuZXM2Il0sIm5hbWVzIjpbIkh0dHBDbGllbnQiLCJjb25zdHJ1Y3RvciIsInRpbWVvdXQiLCJyZXRyeU9wdHMiLCJfdGltZW91dCIsIl9yZXRyaWVzIiwicmV0cmllcyIsIl9taW5SZXRyeURlbGF5IiwibWluRGVsYXlJblNlY29uZHMiLCJfbWF4UmV0cnlEZWxheSIsIm1heERlbGF5SW5TZWNvbmRzIiwicmVxdWVzdCIsIm9wdGlvbnMiLCJlbmRUaW1lIiwiRGF0ZSIsIm5vdyIsInJldHJ5QWZ0ZXJTZWNvbmRzIiwiY2FsbGJhY2siLCJlIiwicmVzIiwic3RhdHVzQ29kZSIsImhlYWRlcnMiLCJib2R5IiwiX21ha2VSZXF1ZXN0IiwiZXJyIiwiX2NvbnZlcnRFcnJvciIsIl9oYW5kbGVSZXRyeSIsInJlcXVlc3RXaXRoRmFpbG92ZXIiLCJyZXRyeUNvdW50ZXIiLCJfaGFuZGxlRXJyb3IiLCJfd2FpdCIsInBhdXNlIiwic2V0VGltZW91dCIsInJldHJ5QWZ0ZXIiLCJUaW1lb3V0RXJyb3IiLCJlcnJvciIsImluY2x1ZGVzIiwibmFtZSIsIk1hdGgiLCJtaW4iLCJwb3ciLCJyZXRyeVRpbWUiLCJwYXJzZSIsIm1ldGFkYXRhIiwicmVjb21tZW5kZWRSZXRyeVRpbWUiLCJzdGF0dXMiLCJWYWxpZGF0aW9uRXJyb3IiLCJtZXNzYWdlIiwiZGV0YWlscyIsIlVuYXV0aG9yaXplZEVycm9yIiwiRm9yYmlkZGVuRXJyb3IiLCJOb3RGb3VuZEVycm9yIiwiVG9vTWFueVJlcXVlc3RzRXJyb3IiLCJJbnRlcm5hbEVycm9yIiwiQXBpRXJyb3IiLCJIdHRwQ2xpZW50TW9jayIsInJlcXVlc3RGbiIsIl9yZXF1ZXN0Rm4iLCJhcHBseSIsImFyZ3VtZW50cyJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7O0FBRUE7Ozs7QUFDQTs7QUFHQTs7Ozs7O0FBRUE7OztBQUdlLE1BQU1BLFVBQU4sQ0FBaUI7O0FBRTlCOzs7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QUdPLE1BQU11RCxjQUFOLFNBQTZCdkQsVUFBN0IsQ0FBd0M7O0FBRTdDOzs7Ozs7QUFNQUMsY0FBWXVELFNBQVosRUFBdUJ0RCxPQUF2QixFQUFnQ0MsU0FBaEMsRUFBMkM7QUFDekMsVUFBTUQsT0FBTixFQUFlQyxTQUFmO0FBQ0EsU0FBS3NELFVBQUwsR0FBa0JELFNBQWxCO0FBQ0Q7O0FBRURqQyxpQkFBZTtBQUNiLFdBQU8sS0FBS2tDLFVBQUwsQ0FBZ0JDLEtBQWhCLENBQXNCLElBQXRCLEVBQTRCQyxTQUE1QixDQUFQO0FBQ0Q7O0FBZjRDO1FBQWxDSixjLEdBQUFBLGMiLCJmaWxlIjoiaHR0cENsaWVudC5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHJlcXVlc3QgZnJvbSAncmVxdWVzdC1wcm9taXNlLWFueSc7XG5pbXBvcnQge1xuICBVbmF1dGhvcml6ZWRFcnJvciwgRm9yYmlkZGVuRXJyb3IsIEFwaUVycm9yLCBWYWxpZGF0aW9uRXJyb3IsIEludGVybmFsRXJyb3IsIE5vdEZvdW5kRXJyb3IsIFRvb01hbnlSZXF1ZXN0c0Vycm9yXG59IGZyb20gJy4vZXJyb3JIYW5kbGVyJztcbmltcG9ydCBUaW1lb3V0RXJyb3IgZnJvbSAnLi90aW1lb3V0RXJyb3InO1xuXG4vKipcbiAqIEhUVFAgY2xpZW50IGxpYnJhcnkgYmFzZWQgb24gcmVxdWVzdC1wcm9taXNlXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEh0dHBDbGllbnQge1xuXG4gIC8qKlxuICAgKiBAdHlwZWRlZiB7T2JqZWN0fSBSZXRyeU9wdGlvbnMgcmV0cnkgb3B0aW9uc1xuICAgKiBAcHJvcGVydHkge051bWJlcn0gW3JldHJpZXNdIHRoZSBudW1iZXIgb2YgYXR0ZW1wdHMgdG8gcmV0cnkgZmFpbGVkIHJlcXVlc3QsIGRlZmF1bHQgNVxuICAgKiBAcHJvcGVydHkge051bWJlcn0gW21pbkRlbGF5SW5TZWNvbmRzXSBtaW5pbXVtIGRlbGF5IGluIHNlY29uZHMgYmVmb3JlIHJldHJ5aW5nLCBkZWZhdWx0IDFcbiAgICogQHByb3BlcnR5IHtOdW1iZXJ9IFttYXhEZWxheUluU2Vjb25kc10gbWF4aW11bSBkZWxheSBpbiBzZWNvbmRzIGJlZm9yZSByZXRyeWluZywgZGVmYXVsdCAzMFxuICAgKi9cblxuICAvKipcbiAgICogQ29uc3RydWN0cyBIdHRwQ2xpZW50IGNsYXNzIGluc3RhbmNlXG4gICAqIEBwYXJhbSB7TnVtYmVyfSB0aW1lb3V0IHJlcXVlc3QgdGltZW91dCBpbiBzZWNvbmRzXG4gICAqIEBwYXJhbSB7UmV0cnlPcHRpb25zfSBbcmV0cnlPcHRzXSByZXRyeSBvcHRpb25zXG4gICAqL1xuICBjb25zdHJ1Y3Rvcih0aW1lb3V0ID0gNjAsIHJldHJ5T3B0cyA9IHt9KSB7XG4gICAgdGhpcy5fdGltZW91dCA9IHRpbWVvdXQgKiAxMDAwO1xuICAgIHRoaXMuX3JldHJpZXMgPSByZXRyeU9wdHMucmV0cmllcyB8fCA1O1xuICAgIHRoaXMuX21pblJldHJ5RGVsYXkgPSAocmV0cnlPcHRzLm1pbkRlbGF5SW5TZWNvbmRzIHx8IDEpICogMTAwMDtcbiAgICB0aGlzLl9tYXhSZXRyeURlbGF5ID0gKHJldHJ5T3B0cy5tYXhEZWxheUluU2Vjb25kcyB8fCAzMCkgKiAxMDAwO1xuICB9XG5cbiAgLyoqXG4gICAqIFBlcmZvcm1zIGEgcmVxdWVzdC4gUmVzcG9uc2UgZXJyb3JzIGFyZSByZXR1cm5lZCBhcyBBcGlFcnJvciBvciBzdWJjbGFzc2VzLlxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyByZXF1ZXN0IG9wdGlvbnNcbiAgICogQHJldHVybnMge09iamVjdHxTdHJpbmd8YW55fSByZXF1ZXN0IHJlc3VsdFxuICAgKi9cbiAgYXN5bmMgcmVxdWVzdChvcHRpb25zLCBlbmRUaW1lID0gRGF0ZS5ub3coKSArIHRoaXMuX21heFJldHJ5RGVsYXkgKiB0aGlzLl9yZXRyaWVzKSB7XG4gICAgb3B0aW9ucy50aW1lb3V0ID0gdGhpcy5fdGltZW91dDtcbiAgICBsZXQgcmV0cnlBZnRlclNlY29uZHMgPSAwO1xuICAgIG9wdGlvbnMuY2FsbGJhY2sgPSAoZSwgcmVzKSA9PiB7XG4gICAgICBpZiAocmVzICYmIHJlcy5zdGF0dXNDb2RlID09PSAyMDIpIHtcbiAgICAgICAgcmV0cnlBZnRlclNlY29uZHMgPSByZXMuaGVhZGVyc1sncmV0cnktYWZ0ZXInXTtcbiAgICAgIH1cbiAgICB9O1xuICAgIGxldCBib2R5O1xuICAgIHRyeSB7XG4gICAgICBib2R5ID0gYXdhaXQgdGhpcy5fbWFrZVJlcXVlc3Qob3B0aW9ucyk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICB0aHJvdyB0aGlzLl9jb252ZXJ0RXJyb3IoZXJyKTtcbiAgICB9XG4gICAgaWYgKHJldHJ5QWZ0ZXJTZWNvbmRzKSB7XG4gICAgICBhd2FpdCB0aGlzLl9oYW5kbGVSZXRyeShlbmRUaW1lLCByZXRyeUFmdGVyU2Vjb25kcyAqIDEwMDApO1xuICAgICAgYm9keSA9IGF3YWl0IHRoaXMucmVxdWVzdChvcHRpb25zLCBlbmRUaW1lKTtcbiAgICB9XG4gICAgcmV0dXJuIGJvZHk7XG4gIH1cblxuICAvKipcbiAgICogUGVyZm9ybXMgYSByZXF1ZXN0IHdpdGggZmFpbG92ZXIuIFJlc3BvbnNlIGVycm9ycyBhcmUgcmV0dXJuZWQgYXMgQXBpRXJyb3Igb3Igc3ViY2xhc3Nlcy5cbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgcmVxdWVzdCBvcHRpb25zXG4gICAqIEByZXR1cm5zIHtPYmplY3R8U3RyaW5nfGFueX0gcmVxdWVzdCByZXN1bHRcbiAgICovXG4gIGFzeW5jIHJlcXVlc3RXaXRoRmFpbG92ZXIob3B0aW9ucywgcmV0cnlDb3VudGVyID0gMCwgZW5kVGltZSA9IERhdGUubm93KCkgKyB0aGlzLl9tYXhSZXRyeURlbGF5ICogdGhpcy5fcmV0cmllcykge1xuICAgIG9wdGlvbnMudGltZW91dCA9IHRoaXMuX3RpbWVvdXQ7XG4gICAgbGV0IHJldHJ5QWZ0ZXJTZWNvbmRzID0gMDtcbiAgICBvcHRpb25zLmNhbGxiYWNrID0gKGUsIHJlcykgPT4ge1xuICAgICAgaWYgKHJlcyAmJiByZXMuc3RhdHVzQ29kZSA9PT0gMjAyKSB7XG4gICAgICAgIHJldHJ5QWZ0ZXJTZWNvbmRzID0gcmVzLmhlYWRlcnNbJ3JldHJ5LWFmdGVyJ107XG4gICAgICB9XG4gICAgfTtcbiAgICBsZXQgYm9keTtcbiAgICB0cnkge1xuICAgICAgYm9keSA9IGF3YWl0IHRoaXMuX21ha2VSZXF1ZXN0KG9wdGlvbnMpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgcmV0cnlDb3VudGVyID0gYXdhaXQgdGhpcy5faGFuZGxlRXJyb3IoZXJyLCByZXRyeUNvdW50ZXIsIGVuZFRpbWUpO1xuICAgICAgcmV0dXJuIHRoaXMucmVxdWVzdFdpdGhGYWlsb3ZlcihvcHRpb25zLCByZXRyeUNvdW50ZXIsIGVuZFRpbWUpO1xuICAgIH1cbiAgICBpZiAocmV0cnlBZnRlclNlY29uZHMpIHtcbiAgICAgIGF3YWl0IHRoaXMuX2hhbmRsZVJldHJ5KGVuZFRpbWUsIHJldHJ5QWZ0ZXJTZWNvbmRzICogMTAwMCk7XG4gICAgICBib2R5ID0gYXdhaXQgdGhpcy5yZXF1ZXN0V2l0aEZhaWxvdmVyKG9wdGlvbnMsIHJldHJ5Q291bnRlciwgZW5kVGltZSk7XG4gICAgfVxuICAgIHJldHVybiBib2R5O1xuICB9XG5cbiAgX21ha2VSZXF1ZXN0KG9wdGlvbnMpIHtcbiAgICByZXR1cm4gcmVxdWVzdChvcHRpb25zKTtcbiAgfVxuXG4gIGFzeW5jIF93YWl0KHBhdXNlKSB7XG4gICAgYXdhaXQgbmV3IFByb21pc2UocmVzID0+IHNldFRpbWVvdXQocmVzLCBwYXVzZSkpO1xuICB9XG5cbiAgYXN5bmMgX2hhbmRsZVJldHJ5KGVuZFRpbWUsIHJldHJ5QWZ0ZXIpIHtcbiAgICBpZihlbmRUaW1lID4gRGF0ZS5ub3coKSArIHJldHJ5QWZ0ZXIpIHtcbiAgICAgIGF3YWl0IHRoaXMuX3dhaXQocmV0cnlBZnRlcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBUaW1lb3V0RXJyb3IoJ1RpbWVkIG91dCB3YWl0aW5nIGZvciB0aGUgZW5kIG9mIHRoZSBwcm9jZXNzIG9mIGNhbGN1bGF0aW5nIG1ldHJpY3MnKTtcbiAgICB9XG4gIH1cblxuICBhc3luYyBfaGFuZGxlRXJyb3IoZXJyLCByZXRyeUNvdW50ZXIsIGVuZFRpbWUpIHtcbiAgICBjb25zdCBlcnJvciA9IHRoaXMuX2NvbnZlcnRFcnJvcihlcnIpO1xuICAgIGlmKFsnSW50ZXJuYWxFcnJvcicsICdBcGlFcnJvciddLmluY2x1ZGVzKGVycm9yLm5hbWUpICYmIHJldHJ5Q291bnRlciA8IHRoaXMuX3JldHJpZXMpIHtcbiAgICAgIGNvbnN0IHBhdXNlID0gTWF0aC5taW4oTWF0aC5wb3coMiwgcmV0cnlDb3VudGVyKSAqIHRoaXMuX21pblJldHJ5RGVsYXksIHRoaXMuX21heFJldHJ5RGVsYXkpO1xuICAgICAgYXdhaXQgdGhpcy5fd2FpdChwYXVzZSk7XG4gICAgICByZXR1cm4gcmV0cnlDb3VudGVyICsgMTtcbiAgICB9IGVsc2UgaWYoZXJyb3IubmFtZSA9PT0gJ1Rvb01hbnlSZXF1ZXN0c0Vycm9yJykge1xuICAgICAgY29uc3QgcmV0cnlUaW1lID0gRGF0ZS5wYXJzZShlcnJvci5tZXRhZGF0YS5yZWNvbW1lbmRlZFJldHJ5VGltZSk7XG4gICAgICBpZiAocmV0cnlUaW1lIDwgZW5kVGltZSkge1xuICAgICAgICBhd2FpdCB0aGlzLl93YWl0KHJldHJ5VGltZSAtIERhdGUubm93KCkpO1xuICAgICAgICByZXR1cm4gcmV0cnlDb3VudGVyO1xuICAgICAgfVxuICAgIH1cbiAgICB0aHJvdyBlcnJvcjtcbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb21wbGV4aXR5XG4gIF9jb252ZXJ0RXJyb3IoZXJyKSB7XG4gICAgZXJyLmVycm9yID0gZXJyLmVycm9yIHx8IHt9O1xuICAgIGxldCBzdGF0dXMgPSBlcnIuc3RhdHVzQ29kZSB8fCBlcnIuc3RhdHVzO1xuICAgIHN3aXRjaCAoc3RhdHVzKSB7XG4gICAgY2FzZSA0MDA6XG4gICAgICByZXR1cm4gbmV3IFZhbGlkYXRpb25FcnJvcihlcnIuZXJyb3IubWVzc2FnZSB8fCBlcnIubWVzc2FnZSwgZXJyLmVycm9yLmRldGFpbHMgfHwgZXJyLmRldGFpbHMpO1xuICAgIGNhc2UgNDAxOlxuICAgICAgcmV0dXJuIG5ldyBVbmF1dGhvcml6ZWRFcnJvcihlcnIuZXJyb3IubWVzc2FnZSB8fCBlcnIubWVzc2FnZSk7XG4gICAgY2FzZSA0MDM6XG4gICAgICByZXR1cm4gbmV3IEZvcmJpZGRlbkVycm9yKGVyci5lcnJvci5tZXNzYWdlIHx8IGVyci5tZXNzYWdlKTtcbiAgICBjYXNlIDQwNDpcbiAgICAgIHJldHVybiBuZXcgTm90Rm91bmRFcnJvcihlcnIuZXJyb3IubWVzc2FnZSB8fCBlcnIubWVzc2FnZSk7XG4gICAgY2FzZSA0Mjk6XG4gICAgICByZXR1cm4gbmV3IFRvb01hbnlSZXF1ZXN0c0Vycm9yKGVyci5lcnJvci5tZXNzYWdlIHx8IGVyci5tZXNzYWdlLCBlcnIuZXJyb3IubWV0YWRhdGEgfHwgZXJyLm1ldGFkYXRhKTtcbiAgICBjYXNlIDUwMDpcbiAgICAgIHJldHVybiBuZXcgSW50ZXJuYWxFcnJvcihlcnIuZXJyb3IubWVzc2FnZSB8fCBlcnIubWVzc2FnZSk7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBuZXcgQXBpRXJyb3IoQXBpRXJyb3IsIGVyci5lcnJvci5tZXNzYWdlIHx8IGVyci5tZXNzYWdlLCBzdGF0dXMpO1xuICAgIH1cbiAgfVxuXG59XG5cbi8qKlxuICogSFRUUCBjbGllbnQgc2VydmljZSBtb2NrIGZvciB0ZXN0c1xuICovXG5leHBvcnQgY2xhc3MgSHR0cENsaWVudE1vY2sgZXh0ZW5kcyBIdHRwQ2xpZW50IHtcblxuICAvKipcbiAgICogQ29uc3RydWN0cyBIVFRQIGNsaWVudCBtb2NrXG4gICAqIEBwYXJhbSB7RnVuY3Rpb24ob3B0aW9uczpPYmplY3QpOlByb21pc2V9IHJlcXVlc3RGbiBtb2NrZWQgcmVxdWVzdCBmdW5jdGlvblxuICAgKiBAcGFyYW0ge051bWJlcn0gdGltZW91dCByZXF1ZXN0IHRpbWVvdXQgaW4gc2Vjb25kc1xuICAgKiBAcGFyYW0ge1JldHJ5T3B0aW9uc30gcmV0cnlPcHRzIHJldHJ5IG9wdGlvbnNcbiAgICovXG4gIGNvbnN0cnVjdG9yKHJlcXVlc3RGbiwgdGltZW91dCwgcmV0cnlPcHRzKSB7XG4gICAgc3VwZXIodGltZW91dCwgcmV0cnlPcHRzKTtcbiAgICB0aGlzLl9yZXF1ZXN0Rm4gPSByZXF1ZXN0Rm47XG4gIH1cblxuICBfbWFrZVJlcXVlc3QoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3JlcXVlc3RGbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9XG5cbn1cbiJdfQ==