'use strict';

/**
 * metaapi.cloud MetaStats MetaTrader API client
 */

Object.defineProperty(exports, "__esModule", {
  value: true
});
class MetaStatsClient {

  /**
   * Constructs MetaStats API client instance
   * @param {DomainClient} domainClient domain client
   */
  constructor(domainClient) {
    this._domainClient = domainClient;
  }

  /**
   * @typedef {Object} CurrencySummaryHistoryDayMetrics profit from trading a currency pair in one trading day
   * @property {String} date date of trading day, in broker timezone, YYYY-MM-DD format
   * @property {Number} totalProfit total profit at the end of the day
   * @property {Number} [totalPips] total pips of trading day
   * @property {Number} [shortProfit] total profit of short trades per day
   * @property {Number} [longProfit] total profit of long trades per day
   * @property {Number} [shortPips] total pips of short trades per day
   * @property {Number} [longPips] total pips of long trades per day
   */

  /**
   * @typedef {Object} CurrencySummaryTotalMetrics provides general data of this currency trading
   * @property {Number} profit cumulative profit of this currency trading
   * @property {Number} trades the number of all trades with this currency
   * @property {Number} [pips] cumulative pips of this currency trading
   * @property {Number} [wonTrades] the number of winning trades with this currency
   * @property {Number} [lostTrades] the number of losing trades with this currency
   * @property {Number} [wonTradesPercent] percentage of winning trades with this currency
   * @property {Number} [lostTradesPercent] percentage of losing trades with this currency
   */

  /**
   * @typedef {Object} CurrencySummaryTradeMetrics provides profit and number of trades in specific trade and currency
   * @property {Number} profit cumulative profit of this currency trading
   * @property {Number} trades the number of all trades with this currency
   * @property {Number} [pips] cumulative pips of this currency trading
   */

  /**
   * @typedef {Object} CurrencySummaryMetrics provides statistics on winning and losing trades indicating
   * the amount in the context of long and short positions.
   * Statistics is given for all currency pairs, for which positions were opened
   * @property {String} currency trading currency pair
   * @property {Array<CurrencySummaryHistoryDayMetrics>} history history of trading a currency pair per trading days
   * @property {CurrencySummaryTotalMetrics} total general data (such as profit, number of trades)
   * about trading a specific currency pair
   * @property {CurrencySummaryTradeMetrics} [short] profit and number of trades of short trades in a specific currency
   * @property {CurrencySummaryTradeMetrics} [long] profit and number of trades of long trades in a specific currency
   */

  /**
   * @typedef {Object} PeriodMetrics provides statistics for one trade period compared to
   * the results for the previous period
   * @property {Number} [profit] cumulative profit of this period
   * @property {Number} [pips] cumulative pips of this period
   * @property {Number} [lots] cumulative lots of this period
   * @property {Number} [gain] gain of this period
   * @property {Number} [trades] the number of trades of this period
   * @property {Number} [wonTradesPercent] percentage of winning trades of this period
   * @property {Number} [profitDifference] difference in profit with the previous period
   * @property {Number} [pipsDifference] difference in pips with the previous period
   * @property {Number} [lotsDifference] difference in lots with the previous period
   * @property {Number} [gainDifference] difference in gain with the previous period
   * @property {Number} [tradesDifference] difference in the number of trades with the previous period
   * @property {Number} [wonTradesPercentDifference] difference in percentage of winning trades with the previous period
   */

  /**
   * @typedef {Object} Periods provides statistics for today, this week, this month, this year
   * @property {PeriodMetrics} [today] trade information for today
   * @property {PeriodMetrics} [thisWeek] trade information for this week
   * @property {PeriodMetrics} [thisMonth] trade information for this month
   * @property {PeriodMetrics} [thisYear] trade information for this year
   */

  /**
   * @typedef {Object} DailyGrowthMetrics provides each profit received from the volume of trade and changes in
   * balance, total accumulated income and existing account drawdown by day
   * @property {String} date date of trading day in broker timezone, YYYY-MM-DD format
   * @property {Number} [profit] cumulative profit per day
   * @property {Number} [pips] cumulative pips per day
   * @property {Number} [lots] cumulative lots per day
   * @property {Number} [gains] cumulative gains per day
   * @property {Number} totalProfit total profit in this day end
   * @property {Number} totalGains total gains in this day end
   * @property {Number} balance balance in this day end
   * @property {Number} [drawdownPercentage] percentage of balance drawdown in this day end
   * @property {Number} [drawdownProfit] maximum registered balance drawdown in basic currency during this day
   */

  /**
   * @typedef {Object} MonthlyAnalyticCurrencyMetrics currency pair trading information for monthly analysis
   * @property {String} currency currency pair
   * @property {Number} [averageHoldingTimeLongsInMilliseconds] average holding time of long trades
   * @property {Number} [averageHoldingTimeShortsInMilliseconds] average holding time of short trades
   * @property {Number} rewardToRiskRatio the difference between reward and risk, where the lesser is always one.
   * So 0 means reward:risk=1:1, 2 means 3:1, -0.5 means 1:1.5
   * @property {Number} popularityPercent the percentage of popularity of this currency this month
   */

  /**
   * @typedef {Object} MonthlyAnalyticsMetrics monthly analysis of trading on this account
   * @property {String} date date of trading month in broker timezone, YYYY-MM format
   * @property {Number} [profit] cumulative profit per month
   * @property {Number} [pips] cumulative pips per month
   * @property {Number} [lots] cumulative lots per month
   * @property {Number} [gains] cumulative gains per month
   * @property {Number} [trades] the number of trades of this month
   * @property {Array<MonthlyAnalyticCurrencyMetrics>} [currencies] list of currency pair trading
   * informations for monthly analysis
   */

  /**
   * @typedef {Object} TradeByTimeMetrics opening/closing deals by days of the week or by by hours of the day
   * @property {String} date date of trading month in broker timezone, YYYY-MM format
   * @property {Number} profit the total profit of the trades at this time
   * @property {Number} [shortProfit] the total profit of short trades at this time
   * @property {Number} [longProfit] the total profit of long trades at this time
   * @property {Number} [wonProfit] the total profit of winning trades at this time
   * @property {Number} [lostProfit] the total profit of losing trades at this time
   * @property {Number} [pips] the total pips of the trades at this time
   * @property {Number} [shortPips] the total pips of short trades at this time
   * @property {Number} [longPips] the total pips of long trades at this time
   * @property {Number} [wonPips] the total pips of winning trades at this time
   * @property {Number} [lostPips] the total pips of losing trades at this time
   * @property {Number} lots cumulative lots of trades at this time
   * @property {Number} gains cumulative gains of trades at this time
   * @property {Number} [shortGains] cumulative gains of short trades at this time
   * @property {Number} [longGains] cumulative gains of long trades at this time
   * @property {Number} [wonGains] cumulative gains of winning trades at this time
   * @property {Number} [lostGains] cumulative gains of losing trades at this time
   * @property {Number} trades the number of all trades at this time
   * @property {Number} [shortTrades] the number of short trades at this time
   * @property {Number} [longTrades] the number of long trades at this time
   * @property {Number} [wonTrades] the number of winning trades at this time
   * @property {Number} [lostTrades] the number of losing trades at this time
   * @property {Number} [shortTradesPercent] percentage of short trades at this time
   * @property {Number} [longTradesPercent] percentage of long trades at this time
   * @property {Number} [wonTradesPercent] percentage of winning trades at this time
   * @property {Number} [lostTradesPercent] percentage of losing trades at this time
   * @property {Number} [hour] day hour (only for by hour case)', within 0-23
   * @property {Number} [day] weekday number (only for by day case), within 0-6
   */

  /**
   * @typedef {Object} RiskOfRuinMetrics risk of ruin of balance metrics
   * @property {Number} lossSize loss size of balance
   * @property {Number} probabilityOfLoss probability of loss shows the risk of losing a particular part of the balance
   * @property {Number} consecutiveLosingTrades the number of losing trades that must be entered sequentially
   * in order for this part of the balance to be lost
   */

  /**
   * @typedef {Object} OneTradeDurationMetrics metrics of one trade duration
   * @property {Array<Number>} gains list of gains for this duration
   * @property {Array<Number>} profits list of profits for this duration
   * @property {Array<Number>} lots list of lots for this duration
   * @property {Array<Number>} [pips] list of pips for this duration
   * @property {Number} durationInMinutes duration of trades in minutes
   */

  /**
   * @typedef {Object} TradeDurationMetrics metrics for each duration of trades
   * @property {Array<OneTradeDurationMetrics>} [won] metrics of winning trades
   * @property {Array<OneTradeDurationMetrics>} [lost] metrics of losing trades
   */

  /**
   * @typedef {Object} TradeDurationDiagramColumnCollectionMetrics collection of metrics of trades
   * in the current column for the diagram
   * @property {Array<Number>} gains list of gains
   * @property {Array<Number>} profits list of profits
   * @property {Array<Number>} lots list of lots
   * @property {Array<Number>} [pips] list of pips
   */

  /**
   * @typedef {Object} TradeDurationDiagramColumnMetrics information column about
   * the duration of trades for the diagram
   * @property {Number} durations the number of durations in this column
   * @property {Number} trades the number of trades in this column
   * @property {String} name name of this column, one of 'seconds', 'minutes', 'hours', 'days', 'weeks', 'months'
   * @property {Number} minDurationInSeconds minimum trade duration in this column in seconds
   * @property {Number} [maxDurationInSeconds] maximum trade duration in this column in seconds
   * @property {TradeDurationDiagramColumnCollectionMetrics} [won] collection of metrics of winning
   * trades in this column
   * @property {TradeDurationDiagramColumnCollectionMetrics} [lost] collection of metrics of losing
   * trades in this column
   */

  /**
   * @typedef {Object} Metrics trading statistics metrics
   * @property {Boolean} [inclusive] indicates whether open positions are included in the metrics,
   * "false" means that there are no open positions. Only for a request with includeOpenPositions=true
   * @property {Number} balance money on the account, not accounting for the results of currently open positions
   * @property {String} [highestBalanceDate] date of maximum balance that have ever been on the account,
   * in broker timezone, YYYY-MM-DD HH:mm:ss.SSS format
   * @property {Number} [highestBalance] maximum balance that have ever been on the account
   * @property {Number} equity the result (current amount) of all positions, including opened
   * @property {Number} margin current value of margin
   * @property {Number} freeMargin current value of free margin
   * @property {Number} [marginLevel] current value of margin level 
   * @property {Number} trades total number of closed positions on the account
   * @property {Number} [withdrawals] total amount withdrawn from the deposit
   * @property {Number} [averageTradeLengthInMilliseconds] average trade length
   * (time from open to close) in milliseconds
   * @property {Number} [bestTrade] the best profit from one trade that has ever been on the account
   * @property {Number} [worstTrade] the worst profit from one trade that has ever been on the account
   * @property {Number} [bestTradePips] the best pips from one trade that has ever been on the account
   * @property {Number} [worstTradePips] the worst pips from one trade that has ever been on the account
   * @property {String} [bestTradeDate] date of the best profit from one trade that have ever been on the account,
   * in broker timezone, YYYY-MM-DD HH:mm:ss.SSS format
   * @property {String} [bestTradePipsDate] date of the best pips from one trade that have ever been on the account,
   * in broker timezone, YYYY-MM-DD HH:mm:ss.SSS format
   * @property {String} [worstTradeDate] date of the worst profit from one trade that have ever been on the account,
   * in broker timezone, YYYY-MM-DD HH:mm:ss.SSS format
   * @property {String} [worstTradePipsDate] date of the worst pips from one trade that have ever been on the account,
   * in broker timezone, YYYY-MM-DD HH:mm:ss.SSS format
   * @property {Number} [cagr] compound annual growth rate
   * @property {Number} [commissions] commissions charged by the broker for the entire period
   * @property {Number} [dailyGain] compound daily rate of return
   * @property {Number} [monthlyGain] compound monthly rate of return
   * @property {Number} [equityPercent] percentage of current equity to balance
   * @property {Number} [expectancy] the average expected profitability of one trade in basic currency
   * @property {Number} [expectancyPips] the average expected profitability of one trade in pips
   * @property {Number} [gain] time-weighted rate of return
   * @property {Number} [geometricHoldingPeriodReturn] geometric holding period return
   * @property {Number} [interest] cumulative interest and swap for the entire period
   * @property {Number} [longTrades] the number of long trades
   * @property {Number} [shortTrades] the number of short trades
   * @property {Number} [longWonTrades] the number of long winning trades
   * @property {Number} [shortWonTrades] the number of short winning trades
   * @property {Number} [longWonTradesPercent] percentage of long winning trades
   * @property {Number} [shortWonTradesPercent] percentage of short winning trades
   * @property {Number} [maxDrawdown] percentage of maximum drawdown of balance during the entire trading history
   * @property {Number} [mar] mar ratio
   * @property {Number} [lots] total volume of trades
   * @property {Number} [pips] cumulative price units
   * @property {Number} profit the total yield of closed positions for the entire period (total result)
   * @property {Number} deposits cumulative deposit for the entire period
   * @property {Number} [absoluteGain] simple deposit increase without regard to reinvestment
   * @property {Number} [profitFactor] the amount yielded by winning trades divided by the amount
   * of losses yielded by losing trades. Result in range 0 - Infinity means: `0` - only loss, `1` - profit equals to
   * loss, `Infinity` - only profit.
   * @property {Number} [sharpeRatio] average return earned in excess of the risk-free rate per unit of volatility.
   * It is calculated if there are at least 30 closed deals in the history
   * @property {Number} [sortinoRatio] differentiates harmful volatility from total overall volatility.
   * It is calculated if there are at least 30 closed deals in the history
   * @property {Number} [standardDeviationProfit] statistical measure of volatility shows how much
   * variation or dispersion. It is calculated if there are at least 30 closed deals in the history
   * @property {Number} [kurtosisProfit] a statistical measure that is used to describe profit distribution.
   * It is calculated if there are at least 30 closed deals in the history
   * @property {Number} [averageHoldingPeriodReturn] average holding period return.
   * It is calculated if there are at least 30 closed deals in the history
   * @property {Number} [averageWin] average win in basic currency
   * @property {Number} [averageWinPips] average win in pips
   * @property {Number} [averageLoss] average loss in basic currency
   * @property {Number} [averageLossPips] average loss in pips
   * @property {Number} [wonTradesPercent] percentage of winning trades
   * @property {Number} [lostTradesPercent] percentage of losing trades
   * @property {Number} [zScore] ability of a trading system to generate wins and losses in streaks.
   * It is calculated if there are at least 30 closed deals in the history
   * @property {Number} [probability] probability that a profit will be followed by a profit and a loss by a loss
   * @property {Number} [daysSinceTradingStarted] the number of days that have passed
   * since the opening of the first trade
   * @property {Array<CurrencySummaryMetrics>} [currencySummary] currency trading summary
   * @property {Array<DailyGrowthMetrics>} [dailyGrowth] daily gain shows the change
   * in account profitability on trading days
   * @property {Array<MonthlyAnalyticsMetrics>} [monthlyAnalytics] monthly analysis of trading on this account
   * @property {Array<TradeByTimeMetrics>} [closeTradesByWeekDay] closing deals by days of the week
   * @property {Array<TradeByTimeMetrics>} [openTradesByHour] opening deals by hour of the day
   * @property {Periods} [periods] trading stats for a few periods compared to the results for the previous period
   * @property {Array<RiskOfRuinMetrics>} [riskOfRuin] risk of ruin of balance
   * @property {TradeDurationMetrics} [tradeDuration] metrics for each duration of trades
   * @property {Array<TradeDurationDiagramColumnMetrics>} [tradeDurationDiagram] list of information columns about the
   * duration of trades for the diagram
   */

  /**
   * Returns metrics of MetaApi account. This API call is billable
   * https://metaapi.cloud/docs/metastats/restApi/api/calculateMetrics/
   * @param {String} accountId MetaApi account id
   * @param {Boolean} [includeOpenPositions] indicates whether open positions will be included
   * in the metrics, default false
   * @return {Metrics} account metrics
   */
  async getMetrics(accountId, includeOpenPositions = false) {

    const getOpts = (host, id) => ({
      url: host + `/users/current/accounts/${id}/metrics`,
      method: 'GET',
      headers: {
        'auth-token': this._domainClient.token
      },
      qs: { includeOpenPositions },
      json: true
    });

    const { metrics } = await this._domainClient.requestMetastats(getOpts, accountId);
    return metrics;
  }

  /**
   * @typedef Trade historical trade
   * @property {String} _id historical trade id
   * @property {String} accountId MetaApi account id
   * @property {Number} volume trade volume
   * @property {Number} durationInMinutes trade duration in minutes
   * @property {Number} profit trade profit
   * @property {Number} gain trade gain
   * @property {String} success trade success
   * @property {String} openTime time the trade was opened at in broker timezone, YYYY-MM-DD HH:mm:ss.SSS format
   * @property {String} type trade type
   * @property {String} [symbol] symbol the trade relates to
   * @property {String} [closeTime] time the trade was closed at in broker timezone, YYYY-MM-DD HH:mm:ss.SSS format
   * @property {Number} [openPrice] trade opening price
   * @property {Number} [closePrice] trade closing price
   * @property {Number} [pips] the number of pips earned (positive) or lost (negative) in this trade
   * @property {Number} [riskInBalancePercent] trade risk in % of balance
   * @property {Number} [riskInPips] trade risk in pips
   */

  /**
   * Returns historical trades of MetaApi account
   * https://metaapi.cloud/docs/metastats/restApi/api/getHistoricalTrades/
   * @param {String} accountId MetaApi account id
   * @param {String} startTime start of time range, inclusive
   * @param {String} endTime end of time range, exclusive
   * @param {Boolean} [updateHistory] update historical trades before returning results. 
   * If set to true, the API call will be counted towards billable MetaStats API calls. 
   * If set to false, the API call is not billable. Default is true
   * @param {Number} [limit] pagination limit
   * @param {Number} [offset] pagination offset
   * @return {Array<Trade>} account historical trades
   */
  async getAccountTrades(accountId, startTime, endTime, updateHistory = true, limit = 1000, offset = 0) {

    const getOpts = (host, id) => ({
      url: host + `/users/current/accounts/${id}/historical-trades/${startTime}/${endTime}`,
      method: 'GET',
      headers: {
        'auth-token': this._domainClient.token
      },
      qs: { updateHistory, limit, offset },
      json: true
    });

    const { trades } = await this._domainClient.requestMetastats(getOpts, accountId);
    return trades;
  }

  /**
   * @typedef OpenTrade open trade
   * @property {String} _id historical trade id
     @property {String} accountId MetaApi account id
     @property {Number} volume trade volume
     @property {Number} durationInMinutes trade duration in minutes
     @property {Number} profit trade profit
     @property {Number} gain trade gain
     @property {String} success trade success
     @property {String} openTime time the trade was opened at in broker timezone, YYYY-MM-DD HH:mm:ss.SSS format
     @property {String} type trade type
     @property {String} symbol symbol the trade relates to
     @property {Number} openPrice trade opening price
     @property {Number} pips the number of pips earned (positive) or lost (negative) in this trade
   * @property {Number} [riskInBalancePercent] trade risk in % of balance
   * @property {Number} [riskInPips] trade risk in pips
   */

  /**
   * Returns open trades of MetaApi account. This API call is not billable
   * https://metaapi.cloud/docs/metastats/restApi/api/getOpenTrades/
   * @param {String} accountId MetaApi account id
   * @return {Array<OpenTrade>} account historical trades
   */
  async getAccountOpenTrades(accountId) {

    const getOpts = (host, id) => ({
      url: host + `/users/current/accounts/${id}/open-trades`,
      method: 'GET',
      headers: {
        'auth-token': this._domainClient.token
      },
      json: true
    });

    const { openTrades } = await this._domainClient.requestMetastats(getOpts, accountId);
    return openTrades;
  }
}
exports.default = MetaStatsClient;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2xpYi9jbGllbnRzL21ldGFTdGF0cy5jbGllbnQuZXM2Il0sIm5hbWVzIjpbIk1ldGFTdGF0c0NsaWVudCIsImNvbnN0cnVjdG9yIiwiZG9tYWluQ2xpZW50IiwiX2RvbWFpbkNsaWVudCIsImdldE1ldHJpY3MiLCJhY2NvdW50SWQiLCJpbmNsdWRlT3BlblBvc2l0aW9ucyIsImdldE9wdHMiLCJob3N0IiwiaWQiLCJ1cmwiLCJtZXRob2QiLCJoZWFkZXJzIiwidG9rZW4iLCJxcyIsImpzb24iLCJtZXRyaWNzIiwicmVxdWVzdE1ldGFzdGF0cyIsImdldEFjY291bnRUcmFkZXMiLCJzdGFydFRpbWUiLCJlbmRUaW1lIiwidXBkYXRlSGlzdG9yeSIsImxpbWl0Iiwib2Zmc2V0IiwidHJhZGVzIiwiZ2V0QWNjb3VudE9wZW5UcmFkZXMiLCJvcGVuVHJhZGVzIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTs7Ozs7OztBQUdlLE1BQU1BLGVBQU4sQ0FBc0I7O0FBRW5DOzs7O0FBSUFDLGNBQVlDLFlBQVosRUFBMEI7QUFDeEIsU0FBS0MsYUFBTCxHQUFxQkQsWUFBckI7QUFDRDs7QUFFRDs7Ozs7Ozs7Ozs7QUFXQTs7Ozs7Ozs7Ozs7QUFXQTs7Ozs7OztBQU9BOzs7Ozs7Ozs7Ozs7QUFZQTs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFpQkE7Ozs7Ozs7O0FBUUE7Ozs7Ozs7Ozs7Ozs7OztBQWVBOzs7Ozs7Ozs7O0FBVUE7Ozs7Ozs7Ozs7OztBQVlBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWdDQTs7Ozs7Ozs7QUFRQTs7Ozs7Ozs7O0FBU0E7Ozs7OztBQU1BOzs7Ozs7Ozs7QUFTQTs7Ozs7Ozs7Ozs7Ozs7QUFjQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXdGQTs7Ozs7Ozs7QUFRQSxRQUFNRSxVQUFOLENBQWlCQyxTQUFqQixFQUE0QkMsdUJBQXVCLEtBQW5ELEVBQTBEOztBQUV4RCxVQUFNQyxVQUFVLENBQUNDLElBQUQsRUFBT0MsRUFBUCxNQUFlO0FBQzdCQyxXQUFLRixPQUFRLDJCQUEwQkMsRUFBRyxVQURiO0FBRTdCRSxjQUFRLEtBRnFCO0FBRzdCQyxlQUFTO0FBQ1Asc0JBQWMsS0FBS1QsYUFBTCxDQUFtQlU7QUFEMUIsT0FIb0I7QUFNN0JDLFVBQUksRUFBQ1Isb0JBQUQsRUFOeUI7QUFPN0JTLFlBQU07QUFQdUIsS0FBZixDQUFoQjs7QUFVQSxVQUFNLEVBQUNDLE9BQUQsS0FBWSxNQUFNLEtBQUtiLGFBQUwsQ0FBbUJjLGdCQUFuQixDQUFvQ1YsT0FBcEMsRUFBNkNGLFNBQTdDLENBQXhCO0FBQ0EsV0FBT1csT0FBUDtBQUNEOztBQUVEOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQW9CQTs7Ozs7Ozs7Ozs7OztBQWFBLFFBQU1FLGdCQUFOLENBQXVCYixTQUF2QixFQUFrQ2MsU0FBbEMsRUFBNkNDLE9BQTdDLEVBQXNEQyxnQkFBZ0IsSUFBdEUsRUFBNEVDLFFBQVEsSUFBcEYsRUFBMEZDLFNBQVMsQ0FBbkcsRUFBc0c7O0FBRXBHLFVBQU1oQixVQUFVLENBQUNDLElBQUQsRUFBT0MsRUFBUCxNQUFlO0FBQzdCQyxXQUFLRixPQUFRLDJCQUEwQkMsRUFBRyxzQkFBcUJVLFNBQVUsSUFBR0MsT0FBUSxFQUR2RDtBQUU3QlQsY0FBUSxLQUZxQjtBQUc3QkMsZUFBUztBQUNQLHNCQUFjLEtBQUtULGFBQUwsQ0FBbUJVO0FBRDFCLE9BSG9CO0FBTTdCQyxVQUFJLEVBQUNPLGFBQUQsRUFBZ0JDLEtBQWhCLEVBQXVCQyxNQUF2QixFQU55QjtBQU83QlIsWUFBTTtBQVB1QixLQUFmLENBQWhCOztBQVVBLFVBQU0sRUFBQ1MsTUFBRCxLQUFXLE1BQU0sS0FBS3JCLGFBQUwsQ0FBbUJjLGdCQUFuQixDQUFvQ1YsT0FBcEMsRUFBNkNGLFNBQTdDLENBQXZCO0FBQ0EsV0FBT21CLE1BQVA7QUFDRDs7QUFFRDs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBa0JBOzs7Ozs7QUFNQSxRQUFNQyxvQkFBTixDQUEyQnBCLFNBQTNCLEVBQXNDOztBQUVwQyxVQUFNRSxVQUFVLENBQUNDLElBQUQsRUFBT0MsRUFBUCxNQUFlO0FBQzdCQyxXQUFLRixPQUFRLDJCQUEwQkMsRUFBRyxjQURiO0FBRTdCRSxjQUFRLEtBRnFCO0FBRzdCQyxlQUFTO0FBQ1Asc0JBQWMsS0FBS1QsYUFBTCxDQUFtQlU7QUFEMUIsT0FIb0I7QUFNN0JFLFlBQU07QUFOdUIsS0FBZixDQUFoQjs7QUFTQSxVQUFNLEVBQUNXLFVBQUQsS0FBZSxNQUFNLEtBQUt2QixhQUFMLENBQW1CYyxnQkFBbkIsQ0FBb0NWLE9BQXBDLEVBQTZDRixTQUE3QyxDQUEzQjtBQUNBLFdBQU9xQixVQUFQO0FBQ0Q7QUFyWWtDO2tCQUFoQjFCLGUiLCJmaWxlIjoibWV0YVN0YXRzLmNsaWVudC5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBtZXRhYXBpLmNsb3VkIE1ldGFTdGF0cyBNZXRhVHJhZGVyIEFQSSBjbGllbnRcbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTWV0YVN0YXRzQ2xpZW50IHtcblxuICAvKipcbiAgICogQ29uc3RydWN0cyBNZXRhU3RhdHMgQVBJIGNsaWVudCBpbnN0YW5jZVxuICAgKiBAcGFyYW0ge0RvbWFpbkNsaWVudH0gZG9tYWluQ2xpZW50IGRvbWFpbiBjbGllbnRcbiAgICovXG4gIGNvbnN0cnVjdG9yKGRvbWFpbkNsaWVudCkge1xuICAgIHRoaXMuX2RvbWFpbkNsaWVudCA9IGRvbWFpbkNsaWVudDtcbiAgfVxuXG4gIC8qKlxuICAgKiBAdHlwZWRlZiB7T2JqZWN0fSBDdXJyZW5jeVN1bW1hcnlIaXN0b3J5RGF5TWV0cmljcyBwcm9maXQgZnJvbSB0cmFkaW5nIGEgY3VycmVuY3kgcGFpciBpbiBvbmUgdHJhZGluZyBkYXlcbiAgICogQHByb3BlcnR5IHtTdHJpbmd9IGRhdGUgZGF0ZSBvZiB0cmFkaW5nIGRheSwgaW4gYnJva2VyIHRpbWV6b25lLCBZWVlZLU1NLUREIGZvcm1hdFxuICAgKiBAcHJvcGVydHkge051bWJlcn0gdG90YWxQcm9maXQgdG90YWwgcHJvZml0IGF0IHRoZSBlbmQgb2YgdGhlIGRheVxuICAgKiBAcHJvcGVydHkge051bWJlcn0gW3RvdGFsUGlwc10gdG90YWwgcGlwcyBvZiB0cmFkaW5nIGRheVxuICAgKiBAcHJvcGVydHkge051bWJlcn0gW3Nob3J0UHJvZml0XSB0b3RhbCBwcm9maXQgb2Ygc2hvcnQgdHJhZGVzIHBlciBkYXlcbiAgICogQHByb3BlcnR5IHtOdW1iZXJ9IFtsb25nUHJvZml0XSB0b3RhbCBwcm9maXQgb2YgbG9uZyB0cmFkZXMgcGVyIGRheVxuICAgKiBAcHJvcGVydHkge051bWJlcn0gW3Nob3J0UGlwc10gdG90YWwgcGlwcyBvZiBzaG9ydCB0cmFkZXMgcGVyIGRheVxuICAgKiBAcHJvcGVydHkge051bWJlcn0gW2xvbmdQaXBzXSB0b3RhbCBwaXBzIG9mIGxvbmcgdHJhZGVzIHBlciBkYXlcbiAgICovXG5cbiAgLyoqXG4gICAqIEB0eXBlZGVmIHtPYmplY3R9IEN1cnJlbmN5U3VtbWFyeVRvdGFsTWV0cmljcyBwcm92aWRlcyBnZW5lcmFsIGRhdGEgb2YgdGhpcyBjdXJyZW5jeSB0cmFkaW5nXG4gICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBwcm9maXQgY3VtdWxhdGl2ZSBwcm9maXQgb2YgdGhpcyBjdXJyZW5jeSB0cmFkaW5nXG4gICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSB0cmFkZXMgdGhlIG51bWJlciBvZiBhbGwgdHJhZGVzIHdpdGggdGhpcyBjdXJyZW5jeVxuICAgKiBAcHJvcGVydHkge051bWJlcn0gW3BpcHNdIGN1bXVsYXRpdmUgcGlwcyBvZiB0aGlzIGN1cnJlbmN5IHRyYWRpbmdcbiAgICogQHByb3BlcnR5IHtOdW1iZXJ9IFt3b25UcmFkZXNdIHRoZSBudW1iZXIgb2Ygd2lubmluZyB0cmFkZXMgd2l0aCB0aGlzIGN1cnJlbmN5XG4gICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBbbG9zdFRyYWRlc10gdGhlIG51bWJlciBvZiBsb3NpbmcgdHJhZGVzIHdpdGggdGhpcyBjdXJyZW5jeVxuICAgKiBAcHJvcGVydHkge051bWJlcn0gW3dvblRyYWRlc1BlcmNlbnRdIHBlcmNlbnRhZ2Ugb2Ygd2lubmluZyB0cmFkZXMgd2l0aCB0aGlzIGN1cnJlbmN5XG4gICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBbbG9zdFRyYWRlc1BlcmNlbnRdIHBlcmNlbnRhZ2Ugb2YgbG9zaW5nIHRyYWRlcyB3aXRoIHRoaXMgY3VycmVuY3lcbiAgICovXG5cbiAgLyoqXG4gICAqIEB0eXBlZGVmIHtPYmplY3R9IEN1cnJlbmN5U3VtbWFyeVRyYWRlTWV0cmljcyBwcm92aWRlcyBwcm9maXQgYW5kIG51bWJlciBvZiB0cmFkZXMgaW4gc3BlY2lmaWMgdHJhZGUgYW5kIGN1cnJlbmN5XG4gICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBwcm9maXQgY3VtdWxhdGl2ZSBwcm9maXQgb2YgdGhpcyBjdXJyZW5jeSB0cmFkaW5nXG4gICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSB0cmFkZXMgdGhlIG51bWJlciBvZiBhbGwgdHJhZGVzIHdpdGggdGhpcyBjdXJyZW5jeVxuICAgKiBAcHJvcGVydHkge051bWJlcn0gW3BpcHNdIGN1bXVsYXRpdmUgcGlwcyBvZiB0aGlzIGN1cnJlbmN5IHRyYWRpbmdcbiAgICovXG5cbiAgLyoqXG4gICAqIEB0eXBlZGVmIHtPYmplY3R9IEN1cnJlbmN5U3VtbWFyeU1ldHJpY3MgcHJvdmlkZXMgc3RhdGlzdGljcyBvbiB3aW5uaW5nIGFuZCBsb3NpbmcgdHJhZGVzIGluZGljYXRpbmdcbiAgICogdGhlIGFtb3VudCBpbiB0aGUgY29udGV4dCBvZiBsb25nIGFuZCBzaG9ydCBwb3NpdGlvbnMuXG4gICAqIFN0YXRpc3RpY3MgaXMgZ2l2ZW4gZm9yIGFsbCBjdXJyZW5jeSBwYWlycywgZm9yIHdoaWNoIHBvc2l0aW9ucyB3ZXJlIG9wZW5lZFxuICAgKiBAcHJvcGVydHkge1N0cmluZ30gY3VycmVuY3kgdHJhZGluZyBjdXJyZW5jeSBwYWlyXG4gICAqIEBwcm9wZXJ0eSB7QXJyYXk8Q3VycmVuY3lTdW1tYXJ5SGlzdG9yeURheU1ldHJpY3M+fSBoaXN0b3J5IGhpc3Rvcnkgb2YgdHJhZGluZyBhIGN1cnJlbmN5IHBhaXIgcGVyIHRyYWRpbmcgZGF5c1xuICAgKiBAcHJvcGVydHkge0N1cnJlbmN5U3VtbWFyeVRvdGFsTWV0cmljc30gdG90YWwgZ2VuZXJhbCBkYXRhIChzdWNoIGFzIHByb2ZpdCwgbnVtYmVyIG9mIHRyYWRlcylcbiAgICogYWJvdXQgdHJhZGluZyBhIHNwZWNpZmljIGN1cnJlbmN5IHBhaXJcbiAgICogQHByb3BlcnR5IHtDdXJyZW5jeVN1bW1hcnlUcmFkZU1ldHJpY3N9IFtzaG9ydF0gcHJvZml0IGFuZCBudW1iZXIgb2YgdHJhZGVzIG9mIHNob3J0IHRyYWRlcyBpbiBhIHNwZWNpZmljIGN1cnJlbmN5XG4gICAqIEBwcm9wZXJ0eSB7Q3VycmVuY3lTdW1tYXJ5VHJhZGVNZXRyaWNzfSBbbG9uZ10gcHJvZml0IGFuZCBudW1iZXIgb2YgdHJhZGVzIG9mIGxvbmcgdHJhZGVzIGluIGEgc3BlY2lmaWMgY3VycmVuY3lcbiAgICovXG5cbiAgLyoqXG4gICAqIEB0eXBlZGVmIHtPYmplY3R9IFBlcmlvZE1ldHJpY3MgcHJvdmlkZXMgc3RhdGlzdGljcyBmb3Igb25lIHRyYWRlIHBlcmlvZCBjb21wYXJlZCB0b1xuICAgKiB0aGUgcmVzdWx0cyBmb3IgdGhlIHByZXZpb3VzIHBlcmlvZFxuICAgKiBAcHJvcGVydHkge051bWJlcn0gW3Byb2ZpdF0gY3VtdWxhdGl2ZSBwcm9maXQgb2YgdGhpcyBwZXJpb2RcbiAgICogQHByb3BlcnR5IHtOdW1iZXJ9IFtwaXBzXSBjdW11bGF0aXZlIHBpcHMgb2YgdGhpcyBwZXJpb2RcbiAgICogQHByb3BlcnR5IHtOdW1iZXJ9IFtsb3RzXSBjdW11bGF0aXZlIGxvdHMgb2YgdGhpcyBwZXJpb2RcbiAgICogQHByb3BlcnR5IHtOdW1iZXJ9IFtnYWluXSBnYWluIG9mIHRoaXMgcGVyaW9kXG4gICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBbdHJhZGVzXSB0aGUgbnVtYmVyIG9mIHRyYWRlcyBvZiB0aGlzIHBlcmlvZFxuICAgKiBAcHJvcGVydHkge051bWJlcn0gW3dvblRyYWRlc1BlcmNlbnRdIHBlcmNlbnRhZ2Ugb2Ygd2lubmluZyB0cmFkZXMgb2YgdGhpcyBwZXJpb2RcbiAgICogQHByb3BlcnR5IHtOdW1iZXJ9IFtwcm9maXREaWZmZXJlbmNlXSBkaWZmZXJlbmNlIGluIHByb2ZpdCB3aXRoIHRoZSBwcmV2aW91cyBwZXJpb2RcbiAgICogQHByb3BlcnR5IHtOdW1iZXJ9IFtwaXBzRGlmZmVyZW5jZV0gZGlmZmVyZW5jZSBpbiBwaXBzIHdpdGggdGhlIHByZXZpb3VzIHBlcmlvZFxuICAgKiBAcHJvcGVydHkge051bWJlcn0gW2xvdHNEaWZmZXJlbmNlXSBkaWZmZXJlbmNlIGluIGxvdHMgd2l0aCB0aGUgcHJldmlvdXMgcGVyaW9kXG4gICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBbZ2FpbkRpZmZlcmVuY2VdIGRpZmZlcmVuY2UgaW4gZ2FpbiB3aXRoIHRoZSBwcmV2aW91cyBwZXJpb2RcbiAgICogQHByb3BlcnR5IHtOdW1iZXJ9IFt0cmFkZXNEaWZmZXJlbmNlXSBkaWZmZXJlbmNlIGluIHRoZSBudW1iZXIgb2YgdHJhZGVzIHdpdGggdGhlIHByZXZpb3VzIHBlcmlvZFxuICAgKiBAcHJvcGVydHkge051bWJlcn0gW3dvblRyYWRlc1BlcmNlbnREaWZmZXJlbmNlXSBkaWZmZXJlbmNlIGluIHBlcmNlbnRhZ2Ugb2Ygd2lubmluZyB0cmFkZXMgd2l0aCB0aGUgcHJldmlvdXMgcGVyaW9kXG4gICAqL1xuXG4gIC8qKlxuICAgKiBAdHlwZWRlZiB7T2JqZWN0fSBQZXJpb2RzIHByb3ZpZGVzIHN0YXRpc3RpY3MgZm9yIHRvZGF5LCB0aGlzIHdlZWssIHRoaXMgbW9udGgsIHRoaXMgeWVhclxuICAgKiBAcHJvcGVydHkge1BlcmlvZE1ldHJpY3N9IFt0b2RheV0gdHJhZGUgaW5mb3JtYXRpb24gZm9yIHRvZGF5XG4gICAqIEBwcm9wZXJ0eSB7UGVyaW9kTWV0cmljc30gW3RoaXNXZWVrXSB0cmFkZSBpbmZvcm1hdGlvbiBmb3IgdGhpcyB3ZWVrXG4gICAqIEBwcm9wZXJ0eSB7UGVyaW9kTWV0cmljc30gW3RoaXNNb250aF0gdHJhZGUgaW5mb3JtYXRpb24gZm9yIHRoaXMgbW9udGhcbiAgICogQHByb3BlcnR5IHtQZXJpb2RNZXRyaWNzfSBbdGhpc1llYXJdIHRyYWRlIGluZm9ybWF0aW9uIGZvciB0aGlzIHllYXJcbiAgICovXG5cbiAgLyoqXG4gICAqIEB0eXBlZGVmIHtPYmplY3R9IERhaWx5R3Jvd3RoTWV0cmljcyBwcm92aWRlcyBlYWNoIHByb2ZpdCByZWNlaXZlZCBmcm9tIHRoZSB2b2x1bWUgb2YgdHJhZGUgYW5kIGNoYW5nZXMgaW5cbiAgICogYmFsYW5jZSwgdG90YWwgYWNjdW11bGF0ZWQgaW5jb21lIGFuZCBleGlzdGluZyBhY2NvdW50IGRyYXdkb3duIGJ5IGRheVxuICAgKiBAcHJvcGVydHkge1N0cmluZ30gZGF0ZSBkYXRlIG9mIHRyYWRpbmcgZGF5IGluIGJyb2tlciB0aW1lem9uZSwgWVlZWS1NTS1ERCBmb3JtYXRcbiAgICogQHByb3BlcnR5IHtOdW1iZXJ9IFtwcm9maXRdIGN1bXVsYXRpdmUgcHJvZml0IHBlciBkYXlcbiAgICogQHByb3BlcnR5IHtOdW1iZXJ9IFtwaXBzXSBjdW11bGF0aXZlIHBpcHMgcGVyIGRheVxuICAgKiBAcHJvcGVydHkge051bWJlcn0gW2xvdHNdIGN1bXVsYXRpdmUgbG90cyBwZXIgZGF5XG4gICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBbZ2FpbnNdIGN1bXVsYXRpdmUgZ2FpbnMgcGVyIGRheVxuICAgKiBAcHJvcGVydHkge051bWJlcn0gdG90YWxQcm9maXQgdG90YWwgcHJvZml0IGluIHRoaXMgZGF5IGVuZFxuICAgKiBAcHJvcGVydHkge051bWJlcn0gdG90YWxHYWlucyB0b3RhbCBnYWlucyBpbiB0aGlzIGRheSBlbmRcbiAgICogQHByb3BlcnR5IHtOdW1iZXJ9IGJhbGFuY2UgYmFsYW5jZSBpbiB0aGlzIGRheSBlbmRcbiAgICogQHByb3BlcnR5IHtOdW1iZXJ9IFtkcmF3ZG93blBlcmNlbnRhZ2VdIHBlcmNlbnRhZ2Ugb2YgYmFsYW5jZSBkcmF3ZG93biBpbiB0aGlzIGRheSBlbmRcbiAgICogQHByb3BlcnR5IHtOdW1iZXJ9IFtkcmF3ZG93blByb2ZpdF0gbWF4aW11bSByZWdpc3RlcmVkIGJhbGFuY2UgZHJhd2Rvd24gaW4gYmFzaWMgY3VycmVuY3kgZHVyaW5nIHRoaXMgZGF5XG4gICAqL1xuXG4gIC8qKlxuICAgKiBAdHlwZWRlZiB7T2JqZWN0fSBNb250aGx5QW5hbHl0aWNDdXJyZW5jeU1ldHJpY3MgY3VycmVuY3kgcGFpciB0cmFkaW5nIGluZm9ybWF0aW9uIGZvciBtb250aGx5IGFuYWx5c2lzXG4gICAqIEBwcm9wZXJ0eSB7U3RyaW5nfSBjdXJyZW5jeSBjdXJyZW5jeSBwYWlyXG4gICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBbYXZlcmFnZUhvbGRpbmdUaW1lTG9uZ3NJbk1pbGxpc2Vjb25kc10gYXZlcmFnZSBob2xkaW5nIHRpbWUgb2YgbG9uZyB0cmFkZXNcbiAgICogQHByb3BlcnR5IHtOdW1iZXJ9IFthdmVyYWdlSG9sZGluZ1RpbWVTaG9ydHNJbk1pbGxpc2Vjb25kc10gYXZlcmFnZSBob2xkaW5nIHRpbWUgb2Ygc2hvcnQgdHJhZGVzXG4gICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSByZXdhcmRUb1Jpc2tSYXRpbyB0aGUgZGlmZmVyZW5jZSBiZXR3ZWVuIHJld2FyZCBhbmQgcmlzaywgd2hlcmUgdGhlIGxlc3NlciBpcyBhbHdheXMgb25lLlxuICAgKiBTbyAwIG1lYW5zIHJld2FyZDpyaXNrPTE6MSwgMiBtZWFucyAzOjEsIC0wLjUgbWVhbnMgMToxLjVcbiAgICogQHByb3BlcnR5IHtOdW1iZXJ9IHBvcHVsYXJpdHlQZXJjZW50IHRoZSBwZXJjZW50YWdlIG9mIHBvcHVsYXJpdHkgb2YgdGhpcyBjdXJyZW5jeSB0aGlzIG1vbnRoXG4gICAqL1xuXG4gIC8qKlxuICAgKiBAdHlwZWRlZiB7T2JqZWN0fSBNb250aGx5QW5hbHl0aWNzTWV0cmljcyBtb250aGx5IGFuYWx5c2lzIG9mIHRyYWRpbmcgb24gdGhpcyBhY2NvdW50XG4gICAqIEBwcm9wZXJ0eSB7U3RyaW5nfSBkYXRlIGRhdGUgb2YgdHJhZGluZyBtb250aCBpbiBicm9rZXIgdGltZXpvbmUsIFlZWVktTU0gZm9ybWF0XG4gICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBbcHJvZml0XSBjdW11bGF0aXZlIHByb2ZpdCBwZXIgbW9udGhcbiAgICogQHByb3BlcnR5IHtOdW1iZXJ9IFtwaXBzXSBjdW11bGF0aXZlIHBpcHMgcGVyIG1vbnRoXG4gICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBbbG90c10gY3VtdWxhdGl2ZSBsb3RzIHBlciBtb250aFxuICAgKiBAcHJvcGVydHkge051bWJlcn0gW2dhaW5zXSBjdW11bGF0aXZlIGdhaW5zIHBlciBtb250aFxuICAgKiBAcHJvcGVydHkge051bWJlcn0gW3RyYWRlc10gdGhlIG51bWJlciBvZiB0cmFkZXMgb2YgdGhpcyBtb250aFxuICAgKiBAcHJvcGVydHkge0FycmF5PE1vbnRobHlBbmFseXRpY0N1cnJlbmN5TWV0cmljcz59IFtjdXJyZW5jaWVzXSBsaXN0IG9mIGN1cnJlbmN5IHBhaXIgdHJhZGluZ1xuICAgKiBpbmZvcm1hdGlvbnMgZm9yIG1vbnRobHkgYW5hbHlzaXNcbiAgICovXG5cbiAgLyoqXG4gICAqIEB0eXBlZGVmIHtPYmplY3R9IFRyYWRlQnlUaW1lTWV0cmljcyBvcGVuaW5nL2Nsb3NpbmcgZGVhbHMgYnkgZGF5cyBvZiB0aGUgd2VlayBvciBieSBieSBob3VycyBvZiB0aGUgZGF5XG4gICAqIEBwcm9wZXJ0eSB7U3RyaW5nfSBkYXRlIGRhdGUgb2YgdHJhZGluZyBtb250aCBpbiBicm9rZXIgdGltZXpvbmUsIFlZWVktTU0gZm9ybWF0XG4gICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBwcm9maXQgdGhlIHRvdGFsIHByb2ZpdCBvZiB0aGUgdHJhZGVzIGF0IHRoaXMgdGltZVxuICAgKiBAcHJvcGVydHkge051bWJlcn0gW3Nob3J0UHJvZml0XSB0aGUgdG90YWwgcHJvZml0IG9mIHNob3J0IHRyYWRlcyBhdCB0aGlzIHRpbWVcbiAgICogQHByb3BlcnR5IHtOdW1iZXJ9IFtsb25nUHJvZml0XSB0aGUgdG90YWwgcHJvZml0IG9mIGxvbmcgdHJhZGVzIGF0IHRoaXMgdGltZVxuICAgKiBAcHJvcGVydHkge051bWJlcn0gW3dvblByb2ZpdF0gdGhlIHRvdGFsIHByb2ZpdCBvZiB3aW5uaW5nIHRyYWRlcyBhdCB0aGlzIHRpbWVcbiAgICogQHByb3BlcnR5IHtOdW1iZXJ9IFtsb3N0UHJvZml0XSB0aGUgdG90YWwgcHJvZml0IG9mIGxvc2luZyB0cmFkZXMgYXQgdGhpcyB0aW1lXG4gICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBbcGlwc10gdGhlIHRvdGFsIHBpcHMgb2YgdGhlIHRyYWRlcyBhdCB0aGlzIHRpbWVcbiAgICogQHByb3BlcnR5IHtOdW1iZXJ9IFtzaG9ydFBpcHNdIHRoZSB0b3RhbCBwaXBzIG9mIHNob3J0IHRyYWRlcyBhdCB0aGlzIHRpbWVcbiAgICogQHByb3BlcnR5IHtOdW1iZXJ9IFtsb25nUGlwc10gdGhlIHRvdGFsIHBpcHMgb2YgbG9uZyB0cmFkZXMgYXQgdGhpcyB0aW1lXG4gICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBbd29uUGlwc10gdGhlIHRvdGFsIHBpcHMgb2Ygd2lubmluZyB0cmFkZXMgYXQgdGhpcyB0aW1lXG4gICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBbbG9zdFBpcHNdIHRoZSB0b3RhbCBwaXBzIG9mIGxvc2luZyB0cmFkZXMgYXQgdGhpcyB0aW1lXG4gICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBsb3RzIGN1bXVsYXRpdmUgbG90cyBvZiB0cmFkZXMgYXQgdGhpcyB0aW1lXG4gICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBnYWlucyBjdW11bGF0aXZlIGdhaW5zIG9mIHRyYWRlcyBhdCB0aGlzIHRpbWVcbiAgICogQHByb3BlcnR5IHtOdW1iZXJ9IFtzaG9ydEdhaW5zXSBjdW11bGF0aXZlIGdhaW5zIG9mIHNob3J0IHRyYWRlcyBhdCB0aGlzIHRpbWVcbiAgICogQHByb3BlcnR5IHtOdW1iZXJ9IFtsb25nR2FpbnNdIGN1bXVsYXRpdmUgZ2FpbnMgb2YgbG9uZyB0cmFkZXMgYXQgdGhpcyB0aW1lXG4gICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBbd29uR2FpbnNdIGN1bXVsYXRpdmUgZ2FpbnMgb2Ygd2lubmluZyB0cmFkZXMgYXQgdGhpcyB0aW1lXG4gICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBbbG9zdEdhaW5zXSBjdW11bGF0aXZlIGdhaW5zIG9mIGxvc2luZyB0cmFkZXMgYXQgdGhpcyB0aW1lXG4gICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSB0cmFkZXMgdGhlIG51bWJlciBvZiBhbGwgdHJhZGVzIGF0IHRoaXMgdGltZVxuICAgKiBAcHJvcGVydHkge051bWJlcn0gW3Nob3J0VHJhZGVzXSB0aGUgbnVtYmVyIG9mIHNob3J0IHRyYWRlcyBhdCB0aGlzIHRpbWVcbiAgICogQHByb3BlcnR5IHtOdW1iZXJ9IFtsb25nVHJhZGVzXSB0aGUgbnVtYmVyIG9mIGxvbmcgdHJhZGVzIGF0IHRoaXMgdGltZVxuICAgKiBAcHJvcGVydHkge051bWJlcn0gW3dvblRyYWRlc10gdGhlIG51bWJlciBvZiB3aW5uaW5nIHRyYWRlcyBhdCB0aGlzIHRpbWVcbiAgICogQHByb3BlcnR5IHtOdW1iZXJ9IFtsb3N0VHJhZGVzXSB0aGUgbnVtYmVyIG9mIGxvc2luZyB0cmFkZXMgYXQgdGhpcyB0aW1lXG4gICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBbc2hvcnRUcmFkZXNQZXJjZW50XSBwZXJjZW50YWdlIG9mIHNob3J0IHRyYWRlcyBhdCB0aGlzIHRpbWVcbiAgICogQHByb3BlcnR5IHtOdW1iZXJ9IFtsb25nVHJhZGVzUGVyY2VudF0gcGVyY2VudGFnZSBvZiBsb25nIHRyYWRlcyBhdCB0aGlzIHRpbWVcbiAgICogQHByb3BlcnR5IHtOdW1iZXJ9IFt3b25UcmFkZXNQZXJjZW50XSBwZXJjZW50YWdlIG9mIHdpbm5pbmcgdHJhZGVzIGF0IHRoaXMgdGltZVxuICAgKiBAcHJvcGVydHkge051bWJlcn0gW2xvc3RUcmFkZXNQZXJjZW50XSBwZXJjZW50YWdlIG9mIGxvc2luZyB0cmFkZXMgYXQgdGhpcyB0aW1lXG4gICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBbaG91cl0gZGF5IGhvdXIgKG9ubHkgZm9yIGJ5IGhvdXIgY2FzZSknLCB3aXRoaW4gMC0yM1xuICAgKiBAcHJvcGVydHkge051bWJlcn0gW2RheV0gd2Vla2RheSBudW1iZXIgKG9ubHkgZm9yIGJ5IGRheSBjYXNlKSwgd2l0aGluIDAtNlxuICAgKi9cblxuICAvKipcbiAgICogQHR5cGVkZWYge09iamVjdH0gUmlza09mUnVpbk1ldHJpY3MgcmlzayBvZiBydWluIG9mIGJhbGFuY2UgbWV0cmljc1xuICAgKiBAcHJvcGVydHkge051bWJlcn0gbG9zc1NpemUgbG9zcyBzaXplIG9mIGJhbGFuY2VcbiAgICogQHByb3BlcnR5IHtOdW1iZXJ9IHByb2JhYmlsaXR5T2ZMb3NzIHByb2JhYmlsaXR5IG9mIGxvc3Mgc2hvd3MgdGhlIHJpc2sgb2YgbG9zaW5nIGEgcGFydGljdWxhciBwYXJ0IG9mIHRoZSBiYWxhbmNlXG4gICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBjb25zZWN1dGl2ZUxvc2luZ1RyYWRlcyB0aGUgbnVtYmVyIG9mIGxvc2luZyB0cmFkZXMgdGhhdCBtdXN0IGJlIGVudGVyZWQgc2VxdWVudGlhbGx5XG4gICAqIGluIG9yZGVyIGZvciB0aGlzIHBhcnQgb2YgdGhlIGJhbGFuY2UgdG8gYmUgbG9zdFxuICAgKi9cblxuICAvKipcbiAgICogQHR5cGVkZWYge09iamVjdH0gT25lVHJhZGVEdXJhdGlvbk1ldHJpY3MgbWV0cmljcyBvZiBvbmUgdHJhZGUgZHVyYXRpb25cbiAgICogQHByb3BlcnR5IHtBcnJheTxOdW1iZXI+fSBnYWlucyBsaXN0IG9mIGdhaW5zIGZvciB0aGlzIGR1cmF0aW9uXG4gICAqIEBwcm9wZXJ0eSB7QXJyYXk8TnVtYmVyPn0gcHJvZml0cyBsaXN0IG9mIHByb2ZpdHMgZm9yIHRoaXMgZHVyYXRpb25cbiAgICogQHByb3BlcnR5IHtBcnJheTxOdW1iZXI+fSBsb3RzIGxpc3Qgb2YgbG90cyBmb3IgdGhpcyBkdXJhdGlvblxuICAgKiBAcHJvcGVydHkge0FycmF5PE51bWJlcj59IFtwaXBzXSBsaXN0IG9mIHBpcHMgZm9yIHRoaXMgZHVyYXRpb25cbiAgICogQHByb3BlcnR5IHtOdW1iZXJ9IGR1cmF0aW9uSW5NaW51dGVzIGR1cmF0aW9uIG9mIHRyYWRlcyBpbiBtaW51dGVzXG4gICAqL1xuXG4gIC8qKlxuICAgKiBAdHlwZWRlZiB7T2JqZWN0fSBUcmFkZUR1cmF0aW9uTWV0cmljcyBtZXRyaWNzIGZvciBlYWNoIGR1cmF0aW9uIG9mIHRyYWRlc1xuICAgKiBAcHJvcGVydHkge0FycmF5PE9uZVRyYWRlRHVyYXRpb25NZXRyaWNzPn0gW3dvbl0gbWV0cmljcyBvZiB3aW5uaW5nIHRyYWRlc1xuICAgKiBAcHJvcGVydHkge0FycmF5PE9uZVRyYWRlRHVyYXRpb25NZXRyaWNzPn0gW2xvc3RdIG1ldHJpY3Mgb2YgbG9zaW5nIHRyYWRlc1xuICAgKi9cblxuICAvKipcbiAgICogQHR5cGVkZWYge09iamVjdH0gVHJhZGVEdXJhdGlvbkRpYWdyYW1Db2x1bW5Db2xsZWN0aW9uTWV0cmljcyBjb2xsZWN0aW9uIG9mIG1ldHJpY3Mgb2YgdHJhZGVzXG4gICAqIGluIHRoZSBjdXJyZW50IGNvbHVtbiBmb3IgdGhlIGRpYWdyYW1cbiAgICogQHByb3BlcnR5IHtBcnJheTxOdW1iZXI+fSBnYWlucyBsaXN0IG9mIGdhaW5zXG4gICAqIEBwcm9wZXJ0eSB7QXJyYXk8TnVtYmVyPn0gcHJvZml0cyBsaXN0IG9mIHByb2ZpdHNcbiAgICogQHByb3BlcnR5IHtBcnJheTxOdW1iZXI+fSBsb3RzIGxpc3Qgb2YgbG90c1xuICAgKiBAcHJvcGVydHkge0FycmF5PE51bWJlcj59IFtwaXBzXSBsaXN0IG9mIHBpcHNcbiAgICovXG5cbiAgLyoqXG4gICAqIEB0eXBlZGVmIHtPYmplY3R9IFRyYWRlRHVyYXRpb25EaWFncmFtQ29sdW1uTWV0cmljcyBpbmZvcm1hdGlvbiBjb2x1bW4gYWJvdXRcbiAgICogdGhlIGR1cmF0aW9uIG9mIHRyYWRlcyBmb3IgdGhlIGRpYWdyYW1cbiAgICogQHByb3BlcnR5IHtOdW1iZXJ9IGR1cmF0aW9ucyB0aGUgbnVtYmVyIG9mIGR1cmF0aW9ucyBpbiB0aGlzIGNvbHVtblxuICAgKiBAcHJvcGVydHkge051bWJlcn0gdHJhZGVzIHRoZSBudW1iZXIgb2YgdHJhZGVzIGluIHRoaXMgY29sdW1uXG4gICAqIEBwcm9wZXJ0eSB7U3RyaW5nfSBuYW1lIG5hbWUgb2YgdGhpcyBjb2x1bW4sIG9uZSBvZiAnc2Vjb25kcycsICdtaW51dGVzJywgJ2hvdXJzJywgJ2RheXMnLCAnd2Vla3MnLCAnbW9udGhzJ1xuICAgKiBAcHJvcGVydHkge051bWJlcn0gbWluRHVyYXRpb25JblNlY29uZHMgbWluaW11bSB0cmFkZSBkdXJhdGlvbiBpbiB0aGlzIGNvbHVtbiBpbiBzZWNvbmRzXG4gICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBbbWF4RHVyYXRpb25JblNlY29uZHNdIG1heGltdW0gdHJhZGUgZHVyYXRpb24gaW4gdGhpcyBjb2x1bW4gaW4gc2Vjb25kc1xuICAgKiBAcHJvcGVydHkge1RyYWRlRHVyYXRpb25EaWFncmFtQ29sdW1uQ29sbGVjdGlvbk1ldHJpY3N9IFt3b25dIGNvbGxlY3Rpb24gb2YgbWV0cmljcyBvZiB3aW5uaW5nXG4gICAqIHRyYWRlcyBpbiB0aGlzIGNvbHVtblxuICAgKiBAcHJvcGVydHkge1RyYWRlRHVyYXRpb25EaWFncmFtQ29sdW1uQ29sbGVjdGlvbk1ldHJpY3N9IFtsb3N0XSBjb2xsZWN0aW9uIG9mIG1ldHJpY3Mgb2YgbG9zaW5nXG4gICAqIHRyYWRlcyBpbiB0aGlzIGNvbHVtblxuICAgKi9cblxuICAvKipcbiAgICogQHR5cGVkZWYge09iamVjdH0gTWV0cmljcyB0cmFkaW5nIHN0YXRpc3RpY3MgbWV0cmljc1xuICAgKiBAcHJvcGVydHkge0Jvb2xlYW59IFtpbmNsdXNpdmVdIGluZGljYXRlcyB3aGV0aGVyIG9wZW4gcG9zaXRpb25zIGFyZSBpbmNsdWRlZCBpbiB0aGUgbWV0cmljcyxcbiAgICogXCJmYWxzZVwiIG1lYW5zIHRoYXQgdGhlcmUgYXJlIG5vIG9wZW4gcG9zaXRpb25zLiBPbmx5IGZvciBhIHJlcXVlc3Qgd2l0aCBpbmNsdWRlT3BlblBvc2l0aW9ucz10cnVlXG4gICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBiYWxhbmNlIG1vbmV5IG9uIHRoZSBhY2NvdW50LCBub3QgYWNjb3VudGluZyBmb3IgdGhlIHJlc3VsdHMgb2YgY3VycmVudGx5IG9wZW4gcG9zaXRpb25zXG4gICAqIEBwcm9wZXJ0eSB7U3RyaW5nfSBbaGlnaGVzdEJhbGFuY2VEYXRlXSBkYXRlIG9mIG1heGltdW0gYmFsYW5jZSB0aGF0IGhhdmUgZXZlciBiZWVuIG9uIHRoZSBhY2NvdW50LFxuICAgKiBpbiBicm9rZXIgdGltZXpvbmUsIFlZWVktTU0tREQgSEg6bW06c3MuU1NTIGZvcm1hdFxuICAgKiBAcHJvcGVydHkge051bWJlcn0gW2hpZ2hlc3RCYWxhbmNlXSBtYXhpbXVtIGJhbGFuY2UgdGhhdCBoYXZlIGV2ZXIgYmVlbiBvbiB0aGUgYWNjb3VudFxuICAgKiBAcHJvcGVydHkge051bWJlcn0gZXF1aXR5IHRoZSByZXN1bHQgKGN1cnJlbnQgYW1vdW50KSBvZiBhbGwgcG9zaXRpb25zLCBpbmNsdWRpbmcgb3BlbmVkXG4gICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBtYXJnaW4gY3VycmVudCB2YWx1ZSBvZiBtYXJnaW5cbiAgICogQHByb3BlcnR5IHtOdW1iZXJ9IGZyZWVNYXJnaW4gY3VycmVudCB2YWx1ZSBvZiBmcmVlIG1hcmdpblxuICAgKiBAcHJvcGVydHkge051bWJlcn0gW21hcmdpbkxldmVsXSBjdXJyZW50IHZhbHVlIG9mIG1hcmdpbiBsZXZlbCBcbiAgICogQHByb3BlcnR5IHtOdW1iZXJ9IHRyYWRlcyB0b3RhbCBudW1iZXIgb2YgY2xvc2VkIHBvc2l0aW9ucyBvbiB0aGUgYWNjb3VudFxuICAgKiBAcHJvcGVydHkge051bWJlcn0gW3dpdGhkcmF3YWxzXSB0b3RhbCBhbW91bnQgd2l0aGRyYXduIGZyb20gdGhlIGRlcG9zaXRcbiAgICogQHByb3BlcnR5IHtOdW1iZXJ9IFthdmVyYWdlVHJhZGVMZW5ndGhJbk1pbGxpc2Vjb25kc10gYXZlcmFnZSB0cmFkZSBsZW5ndGhcbiAgICogKHRpbWUgZnJvbSBvcGVuIHRvIGNsb3NlKSBpbiBtaWxsaXNlY29uZHNcbiAgICogQHByb3BlcnR5IHtOdW1iZXJ9IFtiZXN0VHJhZGVdIHRoZSBiZXN0IHByb2ZpdCBmcm9tIG9uZSB0cmFkZSB0aGF0IGhhcyBldmVyIGJlZW4gb24gdGhlIGFjY291bnRcbiAgICogQHByb3BlcnR5IHtOdW1iZXJ9IFt3b3JzdFRyYWRlXSB0aGUgd29yc3QgcHJvZml0IGZyb20gb25lIHRyYWRlIHRoYXQgaGFzIGV2ZXIgYmVlbiBvbiB0aGUgYWNjb3VudFxuICAgKiBAcHJvcGVydHkge051bWJlcn0gW2Jlc3RUcmFkZVBpcHNdIHRoZSBiZXN0IHBpcHMgZnJvbSBvbmUgdHJhZGUgdGhhdCBoYXMgZXZlciBiZWVuIG9uIHRoZSBhY2NvdW50XG4gICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBbd29yc3RUcmFkZVBpcHNdIHRoZSB3b3JzdCBwaXBzIGZyb20gb25lIHRyYWRlIHRoYXQgaGFzIGV2ZXIgYmVlbiBvbiB0aGUgYWNjb3VudFxuICAgKiBAcHJvcGVydHkge1N0cmluZ30gW2Jlc3RUcmFkZURhdGVdIGRhdGUgb2YgdGhlIGJlc3QgcHJvZml0IGZyb20gb25lIHRyYWRlIHRoYXQgaGF2ZSBldmVyIGJlZW4gb24gdGhlIGFjY291bnQsXG4gICAqIGluIGJyb2tlciB0aW1lem9uZSwgWVlZWS1NTS1ERCBISDptbTpzcy5TU1MgZm9ybWF0XG4gICAqIEBwcm9wZXJ0eSB7U3RyaW5nfSBbYmVzdFRyYWRlUGlwc0RhdGVdIGRhdGUgb2YgdGhlIGJlc3QgcGlwcyBmcm9tIG9uZSB0cmFkZSB0aGF0IGhhdmUgZXZlciBiZWVuIG9uIHRoZSBhY2NvdW50LFxuICAgKiBpbiBicm9rZXIgdGltZXpvbmUsIFlZWVktTU0tREQgSEg6bW06c3MuU1NTIGZvcm1hdFxuICAgKiBAcHJvcGVydHkge1N0cmluZ30gW3dvcnN0VHJhZGVEYXRlXSBkYXRlIG9mIHRoZSB3b3JzdCBwcm9maXQgZnJvbSBvbmUgdHJhZGUgdGhhdCBoYXZlIGV2ZXIgYmVlbiBvbiB0aGUgYWNjb3VudCxcbiAgICogaW4gYnJva2VyIHRpbWV6b25lLCBZWVlZLU1NLUREIEhIOm1tOnNzLlNTUyBmb3JtYXRcbiAgICogQHByb3BlcnR5IHtTdHJpbmd9IFt3b3JzdFRyYWRlUGlwc0RhdGVdIGRhdGUgb2YgdGhlIHdvcnN0IHBpcHMgZnJvbSBvbmUgdHJhZGUgdGhhdCBoYXZlIGV2ZXIgYmVlbiBvbiB0aGUgYWNjb3VudCxcbiAgICogaW4gYnJva2VyIHRpbWV6b25lLCBZWVlZLU1NLUREIEhIOm1tOnNzLlNTUyBmb3JtYXRcbiAgICogQHByb3BlcnR5IHtOdW1iZXJ9IFtjYWdyXSBjb21wb3VuZCBhbm51YWwgZ3Jvd3RoIHJhdGVcbiAgICogQHByb3BlcnR5IHtOdW1iZXJ9IFtjb21taXNzaW9uc10gY29tbWlzc2lvbnMgY2hhcmdlZCBieSB0aGUgYnJva2VyIGZvciB0aGUgZW50aXJlIHBlcmlvZFxuICAgKiBAcHJvcGVydHkge051bWJlcn0gW2RhaWx5R2Fpbl0gY29tcG91bmQgZGFpbHkgcmF0ZSBvZiByZXR1cm5cbiAgICogQHByb3BlcnR5IHtOdW1iZXJ9IFttb250aGx5R2Fpbl0gY29tcG91bmQgbW9udGhseSByYXRlIG9mIHJldHVyblxuICAgKiBAcHJvcGVydHkge051bWJlcn0gW2VxdWl0eVBlcmNlbnRdIHBlcmNlbnRhZ2Ugb2YgY3VycmVudCBlcXVpdHkgdG8gYmFsYW5jZVxuICAgKiBAcHJvcGVydHkge051bWJlcn0gW2V4cGVjdGFuY3ldIHRoZSBhdmVyYWdlIGV4cGVjdGVkIHByb2ZpdGFiaWxpdHkgb2Ygb25lIHRyYWRlIGluIGJhc2ljIGN1cnJlbmN5XG4gICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBbZXhwZWN0YW5jeVBpcHNdIHRoZSBhdmVyYWdlIGV4cGVjdGVkIHByb2ZpdGFiaWxpdHkgb2Ygb25lIHRyYWRlIGluIHBpcHNcbiAgICogQHByb3BlcnR5IHtOdW1iZXJ9IFtnYWluXSB0aW1lLXdlaWdodGVkIHJhdGUgb2YgcmV0dXJuXG4gICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBbZ2VvbWV0cmljSG9sZGluZ1BlcmlvZFJldHVybl0gZ2VvbWV0cmljIGhvbGRpbmcgcGVyaW9kIHJldHVyblxuICAgKiBAcHJvcGVydHkge051bWJlcn0gW2ludGVyZXN0XSBjdW11bGF0aXZlIGludGVyZXN0IGFuZCBzd2FwIGZvciB0aGUgZW50aXJlIHBlcmlvZFxuICAgKiBAcHJvcGVydHkge051bWJlcn0gW2xvbmdUcmFkZXNdIHRoZSBudW1iZXIgb2YgbG9uZyB0cmFkZXNcbiAgICogQHByb3BlcnR5IHtOdW1iZXJ9IFtzaG9ydFRyYWRlc10gdGhlIG51bWJlciBvZiBzaG9ydCB0cmFkZXNcbiAgICogQHByb3BlcnR5IHtOdW1iZXJ9IFtsb25nV29uVHJhZGVzXSB0aGUgbnVtYmVyIG9mIGxvbmcgd2lubmluZyB0cmFkZXNcbiAgICogQHByb3BlcnR5IHtOdW1iZXJ9IFtzaG9ydFdvblRyYWRlc10gdGhlIG51bWJlciBvZiBzaG9ydCB3aW5uaW5nIHRyYWRlc1xuICAgKiBAcHJvcGVydHkge051bWJlcn0gW2xvbmdXb25UcmFkZXNQZXJjZW50XSBwZXJjZW50YWdlIG9mIGxvbmcgd2lubmluZyB0cmFkZXNcbiAgICogQHByb3BlcnR5IHtOdW1iZXJ9IFtzaG9ydFdvblRyYWRlc1BlcmNlbnRdIHBlcmNlbnRhZ2Ugb2Ygc2hvcnQgd2lubmluZyB0cmFkZXNcbiAgICogQHByb3BlcnR5IHtOdW1iZXJ9IFttYXhEcmF3ZG93bl0gcGVyY2VudGFnZSBvZiBtYXhpbXVtIGRyYXdkb3duIG9mIGJhbGFuY2UgZHVyaW5nIHRoZSBlbnRpcmUgdHJhZGluZyBoaXN0b3J5XG4gICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBbbWFyXSBtYXIgcmF0aW9cbiAgICogQHByb3BlcnR5IHtOdW1iZXJ9IFtsb3RzXSB0b3RhbCB2b2x1bWUgb2YgdHJhZGVzXG4gICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBbcGlwc10gY3VtdWxhdGl2ZSBwcmljZSB1bml0c1xuICAgKiBAcHJvcGVydHkge051bWJlcn0gcHJvZml0IHRoZSB0b3RhbCB5aWVsZCBvZiBjbG9zZWQgcG9zaXRpb25zIGZvciB0aGUgZW50aXJlIHBlcmlvZCAodG90YWwgcmVzdWx0KVxuICAgKiBAcHJvcGVydHkge051bWJlcn0gZGVwb3NpdHMgY3VtdWxhdGl2ZSBkZXBvc2l0IGZvciB0aGUgZW50aXJlIHBlcmlvZFxuICAgKiBAcHJvcGVydHkge051bWJlcn0gW2Fic29sdXRlR2Fpbl0gc2ltcGxlIGRlcG9zaXQgaW5jcmVhc2Ugd2l0aG91dCByZWdhcmQgdG8gcmVpbnZlc3RtZW50XG4gICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBbcHJvZml0RmFjdG9yXSB0aGUgYW1vdW50IHlpZWxkZWQgYnkgd2lubmluZyB0cmFkZXMgZGl2aWRlZCBieSB0aGUgYW1vdW50XG4gICAqIG9mIGxvc3NlcyB5aWVsZGVkIGJ5IGxvc2luZyB0cmFkZXMuIFJlc3VsdCBpbiByYW5nZSAwIC0gSW5maW5pdHkgbWVhbnM6IGAwYCAtIG9ubHkgbG9zcywgYDFgIC0gcHJvZml0IGVxdWFscyB0b1xuICAgKiBsb3NzLCBgSW5maW5pdHlgIC0gb25seSBwcm9maXQuXG4gICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBbc2hhcnBlUmF0aW9dIGF2ZXJhZ2UgcmV0dXJuIGVhcm5lZCBpbiBleGNlc3Mgb2YgdGhlIHJpc2stZnJlZSByYXRlIHBlciB1bml0IG9mIHZvbGF0aWxpdHkuXG4gICAqIEl0IGlzIGNhbGN1bGF0ZWQgaWYgdGhlcmUgYXJlIGF0IGxlYXN0IDMwIGNsb3NlZCBkZWFscyBpbiB0aGUgaGlzdG9yeVxuICAgKiBAcHJvcGVydHkge051bWJlcn0gW3NvcnRpbm9SYXRpb10gZGlmZmVyZW50aWF0ZXMgaGFybWZ1bCB2b2xhdGlsaXR5IGZyb20gdG90YWwgb3ZlcmFsbCB2b2xhdGlsaXR5LlxuICAgKiBJdCBpcyBjYWxjdWxhdGVkIGlmIHRoZXJlIGFyZSBhdCBsZWFzdCAzMCBjbG9zZWQgZGVhbHMgaW4gdGhlIGhpc3RvcnlcbiAgICogQHByb3BlcnR5IHtOdW1iZXJ9IFtzdGFuZGFyZERldmlhdGlvblByb2ZpdF0gc3RhdGlzdGljYWwgbWVhc3VyZSBvZiB2b2xhdGlsaXR5IHNob3dzIGhvdyBtdWNoXG4gICAqIHZhcmlhdGlvbiBvciBkaXNwZXJzaW9uLiBJdCBpcyBjYWxjdWxhdGVkIGlmIHRoZXJlIGFyZSBhdCBsZWFzdCAzMCBjbG9zZWQgZGVhbHMgaW4gdGhlIGhpc3RvcnlcbiAgICogQHByb3BlcnR5IHtOdW1iZXJ9IFtrdXJ0b3Npc1Byb2ZpdF0gYSBzdGF0aXN0aWNhbCBtZWFzdXJlIHRoYXQgaXMgdXNlZCB0byBkZXNjcmliZSBwcm9maXQgZGlzdHJpYnV0aW9uLlxuICAgKiBJdCBpcyBjYWxjdWxhdGVkIGlmIHRoZXJlIGFyZSBhdCBsZWFzdCAzMCBjbG9zZWQgZGVhbHMgaW4gdGhlIGhpc3RvcnlcbiAgICogQHByb3BlcnR5IHtOdW1iZXJ9IFthdmVyYWdlSG9sZGluZ1BlcmlvZFJldHVybl0gYXZlcmFnZSBob2xkaW5nIHBlcmlvZCByZXR1cm4uXG4gICAqIEl0IGlzIGNhbGN1bGF0ZWQgaWYgdGhlcmUgYXJlIGF0IGxlYXN0IDMwIGNsb3NlZCBkZWFscyBpbiB0aGUgaGlzdG9yeVxuICAgKiBAcHJvcGVydHkge051bWJlcn0gW2F2ZXJhZ2VXaW5dIGF2ZXJhZ2Ugd2luIGluIGJhc2ljIGN1cnJlbmN5XG4gICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBbYXZlcmFnZVdpblBpcHNdIGF2ZXJhZ2Ugd2luIGluIHBpcHNcbiAgICogQHByb3BlcnR5IHtOdW1iZXJ9IFthdmVyYWdlTG9zc10gYXZlcmFnZSBsb3NzIGluIGJhc2ljIGN1cnJlbmN5XG4gICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBbYXZlcmFnZUxvc3NQaXBzXSBhdmVyYWdlIGxvc3MgaW4gcGlwc1xuICAgKiBAcHJvcGVydHkge051bWJlcn0gW3dvblRyYWRlc1BlcmNlbnRdIHBlcmNlbnRhZ2Ugb2Ygd2lubmluZyB0cmFkZXNcbiAgICogQHByb3BlcnR5IHtOdW1iZXJ9IFtsb3N0VHJhZGVzUGVyY2VudF0gcGVyY2VudGFnZSBvZiBsb3NpbmcgdHJhZGVzXG4gICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBbelNjb3JlXSBhYmlsaXR5IG9mIGEgdHJhZGluZyBzeXN0ZW0gdG8gZ2VuZXJhdGUgd2lucyBhbmQgbG9zc2VzIGluIHN0cmVha3MuXG4gICAqIEl0IGlzIGNhbGN1bGF0ZWQgaWYgdGhlcmUgYXJlIGF0IGxlYXN0IDMwIGNsb3NlZCBkZWFscyBpbiB0aGUgaGlzdG9yeVxuICAgKiBAcHJvcGVydHkge051bWJlcn0gW3Byb2JhYmlsaXR5XSBwcm9iYWJpbGl0eSB0aGF0IGEgcHJvZml0IHdpbGwgYmUgZm9sbG93ZWQgYnkgYSBwcm9maXQgYW5kIGEgbG9zcyBieSBhIGxvc3NcbiAgICogQHByb3BlcnR5IHtOdW1iZXJ9IFtkYXlzU2luY2VUcmFkaW5nU3RhcnRlZF0gdGhlIG51bWJlciBvZiBkYXlzIHRoYXQgaGF2ZSBwYXNzZWRcbiAgICogc2luY2UgdGhlIG9wZW5pbmcgb2YgdGhlIGZpcnN0IHRyYWRlXG4gICAqIEBwcm9wZXJ0eSB7QXJyYXk8Q3VycmVuY3lTdW1tYXJ5TWV0cmljcz59IFtjdXJyZW5jeVN1bW1hcnldIGN1cnJlbmN5IHRyYWRpbmcgc3VtbWFyeVxuICAgKiBAcHJvcGVydHkge0FycmF5PERhaWx5R3Jvd3RoTWV0cmljcz59IFtkYWlseUdyb3d0aF0gZGFpbHkgZ2FpbiBzaG93cyB0aGUgY2hhbmdlXG4gICAqIGluIGFjY291bnQgcHJvZml0YWJpbGl0eSBvbiB0cmFkaW5nIGRheXNcbiAgICogQHByb3BlcnR5IHtBcnJheTxNb250aGx5QW5hbHl0aWNzTWV0cmljcz59IFttb250aGx5QW5hbHl0aWNzXSBtb250aGx5IGFuYWx5c2lzIG9mIHRyYWRpbmcgb24gdGhpcyBhY2NvdW50XG4gICAqIEBwcm9wZXJ0eSB7QXJyYXk8VHJhZGVCeVRpbWVNZXRyaWNzPn0gW2Nsb3NlVHJhZGVzQnlXZWVrRGF5XSBjbG9zaW5nIGRlYWxzIGJ5IGRheXMgb2YgdGhlIHdlZWtcbiAgICogQHByb3BlcnR5IHtBcnJheTxUcmFkZUJ5VGltZU1ldHJpY3M+fSBbb3BlblRyYWRlc0J5SG91cl0gb3BlbmluZyBkZWFscyBieSBob3VyIG9mIHRoZSBkYXlcbiAgICogQHByb3BlcnR5IHtQZXJpb2RzfSBbcGVyaW9kc10gdHJhZGluZyBzdGF0cyBmb3IgYSBmZXcgcGVyaW9kcyBjb21wYXJlZCB0byB0aGUgcmVzdWx0cyBmb3IgdGhlIHByZXZpb3VzIHBlcmlvZFxuICAgKiBAcHJvcGVydHkge0FycmF5PFJpc2tPZlJ1aW5NZXRyaWNzPn0gW3Jpc2tPZlJ1aW5dIHJpc2sgb2YgcnVpbiBvZiBiYWxhbmNlXG4gICAqIEBwcm9wZXJ0eSB7VHJhZGVEdXJhdGlvbk1ldHJpY3N9IFt0cmFkZUR1cmF0aW9uXSBtZXRyaWNzIGZvciBlYWNoIGR1cmF0aW9uIG9mIHRyYWRlc1xuICAgKiBAcHJvcGVydHkge0FycmF5PFRyYWRlRHVyYXRpb25EaWFncmFtQ29sdW1uTWV0cmljcz59IFt0cmFkZUR1cmF0aW9uRGlhZ3JhbV0gbGlzdCBvZiBpbmZvcm1hdGlvbiBjb2x1bW5zIGFib3V0IHRoZVxuICAgKiBkdXJhdGlvbiBvZiB0cmFkZXMgZm9yIHRoZSBkaWFncmFtXG4gICAqL1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIG1ldHJpY3Mgb2YgTWV0YUFwaSBhY2NvdW50LiBUaGlzIEFQSSBjYWxsIGlzIGJpbGxhYmxlXG4gICAqIGh0dHBzOi8vbWV0YWFwaS5jbG91ZC9kb2NzL21ldGFzdGF0cy9yZXN0QXBpL2FwaS9jYWxjdWxhdGVNZXRyaWNzL1xuICAgKiBAcGFyYW0ge1N0cmluZ30gYWNjb3VudElkIE1ldGFBcGkgYWNjb3VudCBpZFxuICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtpbmNsdWRlT3BlblBvc2l0aW9uc10gaW5kaWNhdGVzIHdoZXRoZXIgb3BlbiBwb3NpdGlvbnMgd2lsbCBiZSBpbmNsdWRlZFxuICAgKiBpbiB0aGUgbWV0cmljcywgZGVmYXVsdCBmYWxzZVxuICAgKiBAcmV0dXJuIHtNZXRyaWNzfSBhY2NvdW50IG1ldHJpY3NcbiAgICovXG4gIGFzeW5jIGdldE1ldHJpY3MoYWNjb3VudElkLCBpbmNsdWRlT3BlblBvc2l0aW9ucyA9IGZhbHNlKSB7XG5cbiAgICBjb25zdCBnZXRPcHRzID0gKGhvc3QsIGlkKSA9PiAoe1xuICAgICAgdXJsOiBob3N0ICsgYC91c2Vycy9jdXJyZW50L2FjY291bnRzLyR7aWR9L21ldHJpY3NgLFxuICAgICAgbWV0aG9kOiAnR0VUJyxcbiAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgJ2F1dGgtdG9rZW4nOiB0aGlzLl9kb21haW5DbGllbnQudG9rZW5cbiAgICAgIH0sXG4gICAgICBxczoge2luY2x1ZGVPcGVuUG9zaXRpb25zfSxcbiAgICAgIGpzb246IHRydWUsXG4gICAgfSk7XG4gIFxuICAgIGNvbnN0IHttZXRyaWNzfSA9IGF3YWl0IHRoaXMuX2RvbWFpbkNsaWVudC5yZXF1ZXN0TWV0YXN0YXRzKGdldE9wdHMsIGFjY291bnRJZCk7XG4gICAgcmV0dXJuIG1ldHJpY3M7XG4gIH1cblxuICAvKipcbiAgICogQHR5cGVkZWYgVHJhZGUgaGlzdG9yaWNhbCB0cmFkZVxuICAgKiBAcHJvcGVydHkge1N0cmluZ30gX2lkIGhpc3RvcmljYWwgdHJhZGUgaWRcbiAgICogQHByb3BlcnR5IHtTdHJpbmd9IGFjY291bnRJZCBNZXRhQXBpIGFjY291bnQgaWRcbiAgICogQHByb3BlcnR5IHtOdW1iZXJ9IHZvbHVtZSB0cmFkZSB2b2x1bWVcbiAgICogQHByb3BlcnR5IHtOdW1iZXJ9IGR1cmF0aW9uSW5NaW51dGVzIHRyYWRlIGR1cmF0aW9uIGluIG1pbnV0ZXNcbiAgICogQHByb3BlcnR5IHtOdW1iZXJ9IHByb2ZpdCB0cmFkZSBwcm9maXRcbiAgICogQHByb3BlcnR5IHtOdW1iZXJ9IGdhaW4gdHJhZGUgZ2FpblxuICAgKiBAcHJvcGVydHkge1N0cmluZ30gc3VjY2VzcyB0cmFkZSBzdWNjZXNzXG4gICAqIEBwcm9wZXJ0eSB7U3RyaW5nfSBvcGVuVGltZSB0aW1lIHRoZSB0cmFkZSB3YXMgb3BlbmVkIGF0IGluIGJyb2tlciB0aW1lem9uZSwgWVlZWS1NTS1ERCBISDptbTpzcy5TU1MgZm9ybWF0XG4gICAqIEBwcm9wZXJ0eSB7U3RyaW5nfSB0eXBlIHRyYWRlIHR5cGVcbiAgICogQHByb3BlcnR5IHtTdHJpbmd9IFtzeW1ib2xdIHN5bWJvbCB0aGUgdHJhZGUgcmVsYXRlcyB0b1xuICAgKiBAcHJvcGVydHkge1N0cmluZ30gW2Nsb3NlVGltZV0gdGltZSB0aGUgdHJhZGUgd2FzIGNsb3NlZCBhdCBpbiBicm9rZXIgdGltZXpvbmUsIFlZWVktTU0tREQgSEg6bW06c3MuU1NTIGZvcm1hdFxuICAgKiBAcHJvcGVydHkge051bWJlcn0gW29wZW5QcmljZV0gdHJhZGUgb3BlbmluZyBwcmljZVxuICAgKiBAcHJvcGVydHkge051bWJlcn0gW2Nsb3NlUHJpY2VdIHRyYWRlIGNsb3NpbmcgcHJpY2VcbiAgICogQHByb3BlcnR5IHtOdW1iZXJ9IFtwaXBzXSB0aGUgbnVtYmVyIG9mIHBpcHMgZWFybmVkIChwb3NpdGl2ZSkgb3IgbG9zdCAobmVnYXRpdmUpIGluIHRoaXMgdHJhZGVcbiAgICogQHByb3BlcnR5IHtOdW1iZXJ9IFtyaXNrSW5CYWxhbmNlUGVyY2VudF0gdHJhZGUgcmlzayBpbiAlIG9mIGJhbGFuY2VcbiAgICogQHByb3BlcnR5IHtOdW1iZXJ9IFtyaXNrSW5QaXBzXSB0cmFkZSByaXNrIGluIHBpcHNcbiAgICovXG5cbiAgLyoqXG4gICAqIFJldHVybnMgaGlzdG9yaWNhbCB0cmFkZXMgb2YgTWV0YUFwaSBhY2NvdW50XG4gICAqIGh0dHBzOi8vbWV0YWFwaS5jbG91ZC9kb2NzL21ldGFzdGF0cy9yZXN0QXBpL2FwaS9nZXRIaXN0b3JpY2FsVHJhZGVzL1xuICAgKiBAcGFyYW0ge1N0cmluZ30gYWNjb3VudElkIE1ldGFBcGkgYWNjb3VudCBpZFxuICAgKiBAcGFyYW0ge1N0cmluZ30gc3RhcnRUaW1lIHN0YXJ0IG9mIHRpbWUgcmFuZ2UsIGluY2x1c2l2ZVxuICAgKiBAcGFyYW0ge1N0cmluZ30gZW5kVGltZSBlbmQgb2YgdGltZSByYW5nZSwgZXhjbHVzaXZlXG4gICAqIEBwYXJhbSB7Qm9vbGVhbn0gW3VwZGF0ZUhpc3RvcnldIHVwZGF0ZSBoaXN0b3JpY2FsIHRyYWRlcyBiZWZvcmUgcmV0dXJuaW5nIHJlc3VsdHMuIFxuICAgKiBJZiBzZXQgdG8gdHJ1ZSwgdGhlIEFQSSBjYWxsIHdpbGwgYmUgY291bnRlZCB0b3dhcmRzIGJpbGxhYmxlIE1ldGFTdGF0cyBBUEkgY2FsbHMuIFxuICAgKiBJZiBzZXQgdG8gZmFsc2UsIHRoZSBBUEkgY2FsbCBpcyBub3QgYmlsbGFibGUuIERlZmF1bHQgaXMgdHJ1ZVxuICAgKiBAcGFyYW0ge051bWJlcn0gW2xpbWl0XSBwYWdpbmF0aW9uIGxpbWl0XG4gICAqIEBwYXJhbSB7TnVtYmVyfSBbb2Zmc2V0XSBwYWdpbmF0aW9uIG9mZnNldFxuICAgKiBAcmV0dXJuIHtBcnJheTxUcmFkZT59IGFjY291bnQgaGlzdG9yaWNhbCB0cmFkZXNcbiAgICovXG4gIGFzeW5jIGdldEFjY291bnRUcmFkZXMoYWNjb3VudElkLCBzdGFydFRpbWUsIGVuZFRpbWUsIHVwZGF0ZUhpc3RvcnkgPSB0cnVlLCBsaW1pdCA9IDEwMDAsIG9mZnNldCA9IDApIHtcblxuICAgIGNvbnN0IGdldE9wdHMgPSAoaG9zdCwgaWQpID0+ICh7XG4gICAgICB1cmw6IGhvc3QgKyBgL3VzZXJzL2N1cnJlbnQvYWNjb3VudHMvJHtpZH0vaGlzdG9yaWNhbC10cmFkZXMvJHtzdGFydFRpbWV9LyR7ZW5kVGltZX1gLFxuICAgICAgbWV0aG9kOiAnR0VUJyxcbiAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgJ2F1dGgtdG9rZW4nOiB0aGlzLl9kb21haW5DbGllbnQudG9rZW5cbiAgICAgIH0sXG4gICAgICBxczoge3VwZGF0ZUhpc3RvcnksIGxpbWl0LCBvZmZzZXR9LFxuICAgICAganNvbjogdHJ1ZSxcbiAgICB9KTtcblxuICAgIGNvbnN0IHt0cmFkZXN9ID0gYXdhaXQgdGhpcy5fZG9tYWluQ2xpZW50LnJlcXVlc3RNZXRhc3RhdHMoZ2V0T3B0cywgYWNjb3VudElkKTtcbiAgICByZXR1cm4gdHJhZGVzO1xuICB9XG5cbiAgLyoqXG4gICAqIEB0eXBlZGVmIE9wZW5UcmFkZSBvcGVuIHRyYWRlXG4gICAqIEBwcm9wZXJ0eSB7U3RyaW5nfSBfaWQgaGlzdG9yaWNhbCB0cmFkZSBpZFxuICAgICBAcHJvcGVydHkge1N0cmluZ30gYWNjb3VudElkIE1ldGFBcGkgYWNjb3VudCBpZFxuICAgICBAcHJvcGVydHkge051bWJlcn0gdm9sdW1lIHRyYWRlIHZvbHVtZVxuICAgICBAcHJvcGVydHkge051bWJlcn0gZHVyYXRpb25Jbk1pbnV0ZXMgdHJhZGUgZHVyYXRpb24gaW4gbWludXRlc1xuICAgICBAcHJvcGVydHkge051bWJlcn0gcHJvZml0IHRyYWRlIHByb2ZpdFxuICAgICBAcHJvcGVydHkge051bWJlcn0gZ2FpbiB0cmFkZSBnYWluXG4gICAgIEBwcm9wZXJ0eSB7U3RyaW5nfSBzdWNjZXNzIHRyYWRlIHN1Y2Nlc3NcbiAgICAgQHByb3BlcnR5IHtTdHJpbmd9IG9wZW5UaW1lIHRpbWUgdGhlIHRyYWRlIHdhcyBvcGVuZWQgYXQgaW4gYnJva2VyIHRpbWV6b25lLCBZWVlZLU1NLUREIEhIOm1tOnNzLlNTUyBmb3JtYXRcbiAgICAgQHByb3BlcnR5IHtTdHJpbmd9IHR5cGUgdHJhZGUgdHlwZVxuICAgICBAcHJvcGVydHkge1N0cmluZ30gc3ltYm9sIHN5bWJvbCB0aGUgdHJhZGUgcmVsYXRlcyB0b1xuICAgICBAcHJvcGVydHkge051bWJlcn0gb3BlblByaWNlIHRyYWRlIG9wZW5pbmcgcHJpY2VcbiAgICAgQHByb3BlcnR5IHtOdW1iZXJ9IHBpcHMgdGhlIG51bWJlciBvZiBwaXBzIGVhcm5lZCAocG9zaXRpdmUpIG9yIGxvc3QgKG5lZ2F0aXZlKSBpbiB0aGlzIHRyYWRlXG4gICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBbcmlza0luQmFsYW5jZVBlcmNlbnRdIHRyYWRlIHJpc2sgaW4gJSBvZiBiYWxhbmNlXG4gICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBbcmlza0luUGlwc10gdHJhZGUgcmlzayBpbiBwaXBzXG4gICAqL1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIG9wZW4gdHJhZGVzIG9mIE1ldGFBcGkgYWNjb3VudC4gVGhpcyBBUEkgY2FsbCBpcyBub3QgYmlsbGFibGVcbiAgICogaHR0cHM6Ly9tZXRhYXBpLmNsb3VkL2RvY3MvbWV0YXN0YXRzL3Jlc3RBcGkvYXBpL2dldE9wZW5UcmFkZXMvXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBhY2NvdW50SWQgTWV0YUFwaSBhY2NvdW50IGlkXG4gICAqIEByZXR1cm4ge0FycmF5PE9wZW5UcmFkZT59IGFjY291bnQgaGlzdG9yaWNhbCB0cmFkZXNcbiAgICovXG4gIGFzeW5jIGdldEFjY291bnRPcGVuVHJhZGVzKGFjY291bnRJZCkge1xuXG4gICAgY29uc3QgZ2V0T3B0cyA9IChob3N0LCBpZCkgPT4gKHtcbiAgICAgIHVybDogaG9zdCArIGAvdXNlcnMvY3VycmVudC9hY2NvdW50cy8ke2lkfS9vcGVuLXRyYWRlc2AsXG4gICAgICBtZXRob2Q6ICdHRVQnLFxuICAgICAgaGVhZGVyczoge1xuICAgICAgICAnYXV0aC10b2tlbic6IHRoaXMuX2RvbWFpbkNsaWVudC50b2tlblxuICAgICAgfSxcbiAgICAgIGpzb246IHRydWUsXG4gICAgfSk7XG5cbiAgICBjb25zdCB7b3BlblRyYWRlc30gPSBhd2FpdCB0aGlzLl9kb21haW5DbGllbnQucmVxdWVzdE1ldGFzdGF0cyhnZXRPcHRzLCBhY2NvdW50SWQpO1xuICAgIHJldHVybiBvcGVuVHJhZGVzO1xuICB9XG59XG4iXX0=