'use strict';

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _httpClient = require('./httpClient');

var _httpClient2 = _interopRequireDefault(_httpClient);

var _sinon = require('sinon');

var _sinon2 = _interopRequireDefault(_sinon);

var _domain = require('./domain.client');

var _domain2 = _interopRequireDefault(_domain);

var _errorHandler = require('./errorHandler');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @test {DomainClient}
 */
describe('DomainClient', () => {

  let domainClient;
  const token = 'header.payload.sign';
  let httpClient = new _httpClient2.default();
  let sandbox;
  let requestStub;
  let getRegionsStub;
  let getHostStub;
  let failoverRequestStub;
  let getAccountStub;
  let clock;
  const expected = { trades: 10, equity: 10102.5, balance: 10105, profit: 104, deposits: 10001 };
  const getOpts = (host, id) => ({
    url: host + `/users/current/accounts/${id}/open-trades`,
    method: 'GET',
    headers: {
      'auth-token': token
    },
    json: true
  });

  before(() => {
    sandbox = _sinon2.default.createSandbox();
  });

  beforeEach(() => {
    domainClient = new _domain2.default(httpClient, token);
    clock = sandbox.useFakeTimers({ shouldAdvanceTime: true });
    failoverRequestStub = sandbox.stub(httpClient, 'requestWithFailover');
    getAccountStub = failoverRequestStub.withArgs({
      url: 'https://mt-provisioning-api-v1.agiliumtrade.agiliumtrade.ai/users/current/accounts/accountId',
      method: 'GET',
      headers: {
        'auth-token': token
      },
      json: true
    }).resolves({ _id: 'accountId', region: 'vint-hill', state: 'DEPLOYED',
      accountReplicas: [{ _id: 'accountId2', region: 'us-west', state: 'DEPLOYED' }] });
    requestStub = sandbox.stub(httpClient, 'request');
    requestStub.withArgs({
      url: 'https://metastats-api-v1.vint-hill.agiliumtrade.ai/' + 'users/current/accounts/accountId/open-trades',
      method: 'GET',
      headers: { 'auth-token': token },
      json: true
    }).resolves(expected);
    getHostStub = failoverRequestStub.withArgs({
      url: 'https://mt-provisioning-api-v1.agiliumtrade.agiliumtrade.ai/users/current/servers/mt-client-api',
      method: 'GET',
      headers: {
        'auth-token': token
      },
      json: true
    }).resolves({ domain: 'agiliumtrade.ai' });
  });

  afterEach(() => {
    sandbox.restore();
    clock.restore();
  });

  /**
   * @test {DomainClient#requestMetastats}
   */
  describe('requestMetastats', () => {

    const opts = {
      url: '/users/current/accounts/accountId/metrics',
      method: 'GET',
      headers: {
        'auth-token': token
      },
      json: true
    };

    /**
     * @test {DomainClient#requestMetastats}
     */
    it('should execute request', async () => {
      const response = await domainClient.requestMetastats(getOpts, 'accountId');
      _sinon2.default.assert.match(response, expected);
      _sinon2.default.assert.calledWith(requestStub, {
        url: 'https://metastats-api-v1.vint-hill.agiliumtrade.ai/' + 'users/current/accounts/accountId/open-trades',
        method: 'GET',
        headers: { 'auth-token': token },
        json: true
      });
    });

    describe('_updateHost', () => {

      /**
       * @test {DomainClient#requestMetastats}
       */
      it('should request url again if expired', async () => {
        await domainClient.requestMetastats(getOpts, 'accountId');
        await clock.tickAsync(610000);
        const response = await domainClient.requestMetastats(getOpts, 'accountId');
        _sinon2.default.assert.match(response, expected);
        _sinon2.default.assert.calledWith(requestStub, {
          url: 'https://metastats-api-v1.vint-hill.agiliumtrade.ai/' + 'users/current/accounts/accountId/open-trades',
          method: 'GET',
          headers: { 'auth-token': token },
          json: true
        });
        _sinon2.default.assert.calledTwice(getHostStub);
      });

      /**
       * @test {DomainClient#requestMetastats}
       */
      it('should use cached url on repeated request', async () => {
        await domainClient.requestMetastats(getOpts, 'accountId');
        const response = await domainClient.requestMetastats(getOpts, 'accountId');
        _sinon2.default.assert.calledWith(requestStub, {
          url: 'https://metastats-api-v1.vint-hill.agiliumtrade.ai/' + 'users/current/accounts/accountId/open-trades',
          method: 'GET',
          headers: { 'auth-token': token },
          json: true
        });
        _sinon2.default.assert.match(response, expected);
        _sinon2.default.assert.calledOnce(getHostStub);
      });

      /**
       * @test {DomainClient#requestMetastats}
       */
      it('should return error if failed to get host', async () => {
        getHostStub.throws(new _errorHandler.ValidationError('test'));
        try {
          await domainClient.requestMetastats(getOpts, 'accountId');
          throw new Error('ValidationError expected');
        } catch (error) {
          error.name.should.equal('ValidationError');
        }
      });
    });

    /**
     * @test {DomainClient#requestMetastats}
     */
    describe('_updateAccountHost', () => {

      /**
       * @test {DomainClient#requestMetastats}
       */
      it('should return error if failed to get account data', async () => {
        getAccountStub.rejects(new _errorHandler.ValidationError('test'));
        try {
          await domainClient.requestMetastats(getOpts, 'accountId');
          throw new Error('ValidationError expected');
        } catch (error) {
          error.name.should.equal('ValidationError');
        }
      });

      it('should request main account if using replica', async () => {
        failoverRequestStub.withArgs({
          url: 'https://mt-provisioning-api-v1.agiliumtrade.agiliumtrade.ai/users/current/accounts/accountId2',
          method: 'GET',
          headers: {
            'auth-token': token
          },
          json: true
        }).resolves({ _id: 'accountId2', region: 'us-west', primaryAccountId: 'accountId', state: 'DEPLOYED' });

        const response = await domainClient.requestMetastats(getOpts, 'accountId2');
        _sinon2.default.assert.match(response, expected);
        _sinon2.default.assert.calledWith(requestStub, {
          url: 'https://metastats-api-v1.vint-hill.agiliumtrade.ai/' + 'users/current/accounts/accountId/open-trades',
          method: 'GET',
          headers: { 'auth-token': token },
          json: true
        });
      });

      /**
       * @test {DomainClient#requestMetastats}
       */
      it('should try another region if the first failed', async () => {
        requestStub.withArgs({
          url: 'https://metastats-api-v1.vint-hill.agiliumtrade.ai/' + 'users/current/accounts/accountId/open-trades',
          method: 'GET',
          headers: { 'auth-token': token },
          json: true
        }).rejects(new _errorHandler.InternalError('test'));
        requestStub.withArgs({
          url: 'https://metastats-api-v1.us-west.agiliumtrade.ai/' + 'users/current/accounts/accountId2/open-trades',
          method: 'GET',
          headers: { 'auth-token': token },
          json: true
        }).resolves(expected);
        const response = await domainClient.requestMetastats(getOpts, 'accountId');
        _sinon2.default.assert.calledWith(requestStub, {
          url: 'https://metastats-api-v1.us-west.agiliumtrade.ai/' + 'users/current/accounts/accountId2/open-trades',
          method: 'GET',
          headers: { 'auth-token': token },
          json: true
        });
        _sinon2.default.assert.match(response, expected);

        _sinon2.default.assert.calledOnce(getHostStub);
      });

      /**
       * @test {DomainClient#requestMetastats}
       */
      it('should return error if all regions failed', async () => {
        requestStub.withArgs({
          url: 'https://metastats-api-v1.vint-hill.agiliumtrade.ai/' + 'users/current/accounts/accountId/open-trades',
          method: 'GET',
          headers: { 'auth-token': token },
          json: true
        }).throws(new _errorHandler.InternalError('test'));
        requestStub.withArgs({
          url: 'https://metastats-api-v1.us-west.agiliumtrade.ai/' + 'users/current/accounts/accountId2/open-trades',
          method: 'GET',
          headers: { 'auth-token': token },
          json: true
        }).throws(new _errorHandler.InternalError('test'));

        try {
          await domainClient.requestMetastats(getOpts, 'accountId');
          throw new Error('InternalError expected');
        } catch (error) {
          error.name.should.equal('InternalError');
        }
      });

      /**
       * @test {DomainClient#requestSignal}
       */
      it('should execute a request and update host if expired', async () => {
        const otherRegionOpts = {
          url: 'https://metastats-api-v1.us-west.agiliumtrade.ai/' + 'users/current/accounts/accountId2/open-trades',
          method: 'GET',
          headers: { 'auth-token': token },
          json: true
        };
        const otherRegionStub = requestStub.withArgs(otherRegionOpts).resolves(expected);
        getAccountStub = failoverRequestStub.withArgs({
          url: 'https://mt-provisioning-api-v1.agiliumtrade.agiliumtrade.ai/users/current/accounts/accountId',
          method: 'GET',
          headers: {
            'auth-token': token
          },
          json: true
        }).resolves({ _id: 'accountId', region: 'vint-hill', state: 'DEPLOYED' });
        await domainClient.requestMetastats(getOpts, 'accountId');
        await new _promise2.default(res => setTimeout(res, 50));
        _sinon2.default.assert.calledOnce(getAccountStub);
        _sinon2.default.assert.notCalled(otherRegionStub);
        getAccountStub.resolves({ _id: 'accountId2', region: 'us-west', state: 'DEPLOYED' });
        await clock.tickAsync(610000);
        const result = await domainClient.requestMetastats(getOpts, 'accountId');
        await new _promise2.default(res => setTimeout(res, 50));
        _sinon2.default.assert.calledTwice(getAccountStub);
        _sinon2.default.assert.calledOnce(otherRegionStub);
        await domainClient.requestMetastats(getOpts, 'accountId');
        await new _promise2.default(res => setTimeout(res, 50));
        _sinon2.default.assert.calledTwice(getAccountStub);
        _sinon2.default.assert.calledTwice(otherRegionStub);
      });

      /**
       * @test {DomainClient#requestMetastats}
       */
      it('should return error if no replicas are deployed', async () => {
        getAccountStub.resolves({ _id: 'accountId', region: 'vint-hill', state: 'UNDEPLOYED' });
        try {
          await domainClient.requestMetastats(getOpts, 'accountId');
          throw new Error('ValidationError expected');
        } catch (error) {
          error.name.should.equal('ValidationError');
        }
      });

      /**
       * @test {DomainClient#requestMetastats}
       */
      it('should filter out undeployed replicas', async () => {
        getAccountStub.resolves({ _id: 'accountId', region: 'vint-hill', state: 'UNDEPLOYED', accountReplicas: [{ _id: 'accountId2', region: 'us-west', state: 'UNDEPLOYED' }, { _id: 'accountId3', region: 'germany', state: 'DEPLOYED' }] });
        requestStub.withArgs({
          url: 'https://metastats-api-v1.germany.agiliumtrade.ai/' + 'users/current/accounts/accountId3/open-trades',
          method: 'GET',
          headers: { 'auth-token': token },
          json: true
        }).resolves(expected);
        const response = await domainClient.requestMetastats(getOpts, 'accountId');
        _sinon2.default.assert.match(response, expected);
        _sinon2.default.assert.calledWith(requestStub, {
          url: 'https://metastats-api-v1.germany.agiliumtrade.ai/' + 'users/current/accounts/accountId3/open-trades',
          method: 'GET',
          headers: { 'auth-token': token },
          json: true
        });
      });
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,